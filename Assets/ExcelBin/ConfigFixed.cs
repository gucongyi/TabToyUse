// Generated by github.com/davyxu/tabtoy
// Version: 2.8.5
// DO NOT EDIT!! 这个是自动生成的数据类
using System.Collections.Generic;

namespace Company.Cfg
{
	
	// Defined in table: Base
	public enum SkillTriggerType
	{
		
		
		weatherTrigger = 0, // 天气触发
		
		
		FieldTrigger = 1, // 场地触发
		
		
		StageTrigger = 2, // 阶段触发
		
		
		DynamicTrigger = 3, // 动态触发
		
		
		LongTrigger = 4, // 长度触发
	
	}
	
	// Defined in table: Base
	public enum SkillTriggerContent
	{
		
		
		SunnyDay = 0, // 晴天天气
		
		
		RainyDay = 1, // 雨天天气
		
		
		FoggyDay = 2, // 雾天天气
		
		
		GrassLand = 3, // 草地场地
		
		
		MuddyLand = 4, // 泥地场地
		
		
		SandLand = 5, // 沙地场地
		
		
		StartStage = 6, // 开始阶段
		
		
		EnterTurnStage = 7, // 入弯阶段
		
		
		ExitTurnStage = 8, // 出弯阶段
		
		
		SprintStage = 9, // 冲刺阶段
		
		
		StraightLength = 10, // 直线长度
		
		
		CurveLength = 11, // 弯道长度
		
		
		RaceLength = 12, // 赛程长度
		
		
		Overtake = 13, // 超越对手
		
		
		Overtaken = 14, // 被超越
		
		
		HeadPosition = 15, // 领头位置
		
		
		EndPosition = 16, // 末尾位置
		
		
		BeforeAppoint = 17, // 指定位前
		
		
		AfterAppoint = 18, // 指定位后
		
		
		WearEquipment = 19, // 穿戴装备
		
		
		StraightLine = 20, // 直线阶段
		
		
		CurveLine = 21, // 弯道阶段
	
	}
	
	// Defined in table: Base
	public enum AttributeType
	{
		
		
		Speed = 0, // 速度
		
		
		Endurance = 1, // 耐力
		
		
		Burst = 2, // 爆发
		
		
		Balance = 3, // 平衡
		
		
		AllAttribute = 4, // 全部属性
		
		
		NoneAttribute = 5, // 无
		
		
		ExtraSkill = 6, // 技能
		
		
		PhysicalPower = 7, // 当前体力
	
	}
	
	// Defined in table: Base
	public enum SkillEffectTarget
	{
		
		
		Self = 0, // 自己
		
		
		Enemy = 1, // 单个敌人
	
	}
	
	// Defined in table: Base
	public enum ValueType
	{
		
		
		Integer = 0, // 整数值
		
		
		percentage = 1, // 百分数值
	
	}
	
	// Defined in table: Base
	public enum HorseSkillType
	{
		
		
		NatureSkill = 0, // 性格技能
		
		
		PracticeSkill = 1, // 受训技能
		
		
		EquipSkill = 2, // 装备技能
	
	}
	
	// Defined in table: Base
	public enum CommodityLimitType
	{
		
		
		NoneLimit = 0, // 无限商品
		
		
		DayLimit = 1, // 日限商品
		
		
		WeekLimit = 2, // 周限商品
		
		
		MonthLimit = 3, // 月限商品
		
		
		PermanentLimit = 4, // 永限商品
	
	}
	
	// Defined in table: Base
	public enum GuideHandleType
	{
		
		/// <summary> 
		/// UI气泡
		///info 文本
		///x,y 背景位置 离中心点的偏移
		/// </summary>
		UI气泡 = 0, 
		
		/// <summary> 
		/// 等待进入大厅 无参数
		/// </summary>
		等待进入大厅 = 1, 
		
		/// <summary> 
		/// UI角色
		///x,y 位置 离中心点的偏移
		///x1:-1翻转
		/// </summary>
		UI角色 = 2, 
		
		/// <summary> 
		/// UI镂空
		///x,y 镂空偏移 (三角无效)
		///x1,y1 手偏移
		///rotationZ 手旋转
		///path 镂空目标 
		///hollowType 0方形 1 三角型
		///width  height 镂空宽 高
		/// </summary>
		UI镂空 = 3, 
		
		/// <summary> 
		/// UI遮挡隐藏 无参数
		/// </summary>
		UI遮挡隐藏 = 4, 
		
		/// <summary> 
		/// UI遮挡显示 无参数
		/// </summary>
		UI遮挡显示 = 5, 
		
		/// <summary> 
		/// UI引导按钮
		///info 文本
		///x,y 位置
		/// </summary>
		UI引导按钮 = 6, 
		
		/// <summary> 
		/// 等待UI显示
		///path UI类型名字(预制件名)
		/// </summary>
		等待UI显示 = 7, 
		
		/// <summary> 
		/// 等待点击镂空UI
		/// </summary>
		等待点击镂空UI = 8, 
		
		/// <summary> 
		/// 等待点击引导按钮
		/// </summary>
		等待点击引导按钮 = 9, 
	
	}
	
	

	// Defined in table: Config
	
	[System.Serializable]public partial class Config
	{
	
		public tabtoy.Logger TableLogger = new tabtoy.Logger();
	
		
		/// <summary> 
		/// AIValue
		/// </summary>
		public List<AIValueDefine> AIValue = new List<AIValueDefine>(); 
		
		/// <summary> 
		/// Ancestry
		/// </summary>
		public List<AncestryDefine> Ancestry = new List<AncestryDefine>(); 
		
		/// <summary> 
		/// AuctionHorse
		/// </summary>
		public List<AuctionHorseDefine> AuctionHorse = new List<AuctionHorseDefine>(); 
		
		/// <summary> 
		/// Base
		/// </summary>
		public List<BaseDefine> Base = new List<BaseDefine>(); 
		
		/// <summary> 
		/// Buff
		/// </summary>
		public List<BuffDefine> Buff = new List<BuffDefine>(); 
		
		/// <summary> 
		/// Challenge
		/// </summary>
		public List<ChallengeDefine> Challenge = new List<ChallengeDefine>(); 
		
		/// <summary> 
		/// Currency
		/// </summary>
		public List<CurrencyDefine> Currency = new List<CurrencyDefine>(); 
		
		/// <summary> 
		/// Equipment
		/// </summary>
		public List<EquipmentDefine> Equipment = new List<EquipmentDefine>(); 
		
		/// <summary> 
		/// Gene
		/// </summary>
		public List<GeneDefine> Gene = new List<GeneDefine>(); 
		
		/// <summary> 
		/// GuildIcon
		/// </summary>
		public List<GuildIconDefine> GuildIcon = new List<GuildIconDefine>(); 
		
		/// <summary> 
		/// Head
		/// </summary>
		public List<HeadDefine> Head = new List<HeadDefine>(); 
		
		/// <summary> 
		/// Help
		/// </summary>
		public List<HelpDefine> Help = new List<HelpDefine>(); 
		
		/// <summary> 
		/// Hero
		/// </summary>
		public List<HeroDefine> Hero = new List<HeroDefine>(); 
		
		/// <summary> 
		/// HorseColor
		/// </summary>
		public List<HorseColorDefine> HorseColor = new List<HorseColorDefine>(); 
		
		/// <summary> 
		/// HorseConfig
		/// </summary>
		public List<HorseConfigDefine> HorseConfig = new List<HorseConfigDefine>(); 
		
		/// <summary> 
		/// HorsePractice
		/// </summary>
		public List<HorsePracticeDefine> HorsePractice = new List<HorsePracticeDefine>(); 
		
		/// <summary> 
		/// HorseSkill
		/// </summary>
		public List<HorseSkillDefine> HorseSkill = new List<HorseSkillDefine>(); 
		
		/// <summary> 
		/// HorseStripe
		/// </summary>
		public List<HorseStripeDefine> HorseStripe = new List<HorseStripeDefine>(); 
		
		/// <summary> 
		/// HumanFashion
		/// </summary>
		public List<HumanFashionDefine> HumanFashion = new List<HumanFashionDefine>(); 
		
		/// <summary> 
		/// HumanSkill
		/// </summary>
		public List<HumanSkillDefine> HumanSkill = new List<HumanSkillDefine>(); 
		
		/// <summary> 
		/// Item
		/// </summary>
		public List<ItemDefine> Item = new List<ItemDefine>(); 
		
		/// <summary> 
		/// ItemPack
		/// </summary>
		public List<ItemPackDefine> ItemPack = new List<ItemPackDefine>(); 
		
		/// <summary> 
		/// Language
		/// </summary>
		public List<LanguageDefine> Language = new List<LanguageDefine>(); 
		
		/// <summary> 
		/// LittleGame
		/// </summary>
		public List<LittleGameDefine> LittleGame = new List<LittleGameDefine>(); 
		
		/// <summary> 
		/// MapSet
		/// </summary>
		public List<MapSetDefine> MapSet = new List<MapSetDefine>(); 
		
		/// <summary> 
		/// MatchConfig
		/// </summary>
		public List<MatchConfigDefine> MatchConfig = new List<MatchConfigDefine>(); 
		
		/// <summary> 
		/// MatchEffectType
		/// </summary>
		public List<MatchEffectTypeDefine> MatchEffectType = new List<MatchEffectTypeDefine>(); 
		
		/// <summary> 
		/// NormalShop
		/// </summary>
		public List<NormalShopDefine> NormalShop = new List<NormalShopDefine>(); 
		
		/// <summary> 
		/// Noviceguide
		/// </summary>
		public List<NoviceguideDefine> Noviceguide = new List<NoviceguideDefine>(); 
		
		/// <summary> 
		/// OfficialMatch
		/// </summary>
		public List<OfficialMatchDefine> OfficialMatch = new List<OfficialMatchDefine>(); 
		
		/// <summary> 
		/// RandomName
		/// </summary>
		public List<RandomNameDefine> RandomName = new List<RandomNameDefine>(); 
		
		/// <summary> 
		/// RandomName1
		/// </summary>
		public List<RandomName1Define> RandomName1 = new List<RandomName1Define>(); 
		
		/// <summary> 
		/// Recharge
		/// </summary>
		public List<RechargeDefine> Recharge = new List<RechargeDefine>(); 
		
		/// <summary> 
		/// Robot
		/// </summary>
		public List<RobotDefine> Robot = new List<RobotDefine>(); 
		
		/// <summary> 
		/// RobotHorse
		/// </summary>
		public List<RobotHorseDefine> RobotHorse = new List<RobotHorseDefine>(); 
		
		/// <summary> 
		/// SecondaryAttribute
		/// </summary>
		public List<SecondaryAttributeDefine> SecondaryAttribute = new List<SecondaryAttributeDefine>(); 
		
		/// <summary> 
		/// SellHorse
		/// </summary>
		public List<SellHorseDefine> SellHorse = new List<SellHorseDefine>(); 
		
		/// <summary> 
		/// Sign
		/// </summary>
		public List<SignDefine> Sign = new List<SignDefine>(); 
		
		/// <summary> 
		/// Steptable
		/// </summary>
		public List<SteptableDefine> Steptable = new List<SteptableDefine>(); 
		
		/// <summary> 
		/// Stud
		/// </summary>
		public List<StudDefine> Stud = new List<StudDefine>(); 
	
	
		#region Index code
	 	Dictionary<int, AIValueDefine> _AIValueByID = new Dictionary<int, AIValueDefine>();
        public AIValueDefine GetAIValueByID(int ID, AIValueDefine def = default(AIValueDefine))
        {
            AIValueDefine ret;
            if ( _AIValueByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(AIValueDefine) )
			{
				TableLogger.ErrorLine("GetAIValueByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, AncestryDefine> _AncestryByID = new Dictionary<int, AncestryDefine>();
        public AncestryDefine GetAncestryByID(int ID, AncestryDefine def = default(AncestryDefine))
        {
            AncestryDefine ret;
            if ( _AncestryByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(AncestryDefine) )
			{
				TableLogger.ErrorLine("GetAncestryByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, AuctionHorseDefine> _AuctionHorseByID = new Dictionary<int, AuctionHorseDefine>();
        public AuctionHorseDefine GetAuctionHorseByID(int ID, AuctionHorseDefine def = default(AuctionHorseDefine))
        {
            AuctionHorseDefine ret;
            if ( _AuctionHorseByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(AuctionHorseDefine) )
			{
				TableLogger.ErrorLine("GetAuctionHorseByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, BaseDefine> _BaseByID = new Dictionary<int, BaseDefine>();
        public BaseDefine GetBaseByID(int ID, BaseDefine def = default(BaseDefine))
        {
            BaseDefine ret;
            if ( _BaseByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(BaseDefine) )
			{
				TableLogger.ErrorLine("GetBaseByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, BuffDefine> _BuffBySkillEffectID = new Dictionary<int, BuffDefine>();
        public BuffDefine GetBuffBySkillEffectID(int SkillEffectID, BuffDefine def = default(BuffDefine))
        {
            BuffDefine ret;
            if ( _BuffBySkillEffectID.TryGetValue( SkillEffectID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(BuffDefine) )
			{
				TableLogger.ErrorLine("GetBuffBySkillEffectID failed, SkillEffectID: {0}", SkillEffectID);
			}

            return def;
        }
		Dictionary<int, ChallengeDefine> _ChallengeByID = new Dictionary<int, ChallengeDefine>();
        public ChallengeDefine GetChallengeByID(int ID, ChallengeDefine def = default(ChallengeDefine))
        {
            ChallengeDefine ret;
            if ( _ChallengeByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(ChallengeDefine) )
			{
				TableLogger.ErrorLine("GetChallengeByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, CurrencyDefine> _CurrencyByID = new Dictionary<int, CurrencyDefine>();
        public CurrencyDefine GetCurrencyByID(int ID, CurrencyDefine def = default(CurrencyDefine))
        {
            CurrencyDefine ret;
            if ( _CurrencyByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(CurrencyDefine) )
			{
				TableLogger.ErrorLine("GetCurrencyByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, EquipmentDefine> _EquipmentByID = new Dictionary<int, EquipmentDefine>();
        public EquipmentDefine GetEquipmentByID(int ID, EquipmentDefine def = default(EquipmentDefine))
        {
            EquipmentDefine ret;
            if ( _EquipmentByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(EquipmentDefine) )
			{
				TableLogger.ErrorLine("GetEquipmentByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, GeneDefine> _GeneByID = new Dictionary<int, GeneDefine>();
        public GeneDefine GetGeneByID(int ID, GeneDefine def = default(GeneDefine))
        {
            GeneDefine ret;
            if ( _GeneByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(GeneDefine) )
			{
				TableLogger.ErrorLine("GetGeneByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, GuildIconDefine> _GuildIconByID = new Dictionary<int, GuildIconDefine>();
        public GuildIconDefine GetGuildIconByID(int ID, GuildIconDefine def = default(GuildIconDefine))
        {
            GuildIconDefine ret;
            if ( _GuildIconByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(GuildIconDefine) )
			{
				TableLogger.ErrorLine("GetGuildIconByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, HeadDefine> _HeadByID = new Dictionary<int, HeadDefine>();
        public HeadDefine GetHeadByID(int ID, HeadDefine def = default(HeadDefine))
        {
            HeadDefine ret;
            if ( _HeadByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(HeadDefine) )
			{
				TableLogger.ErrorLine("GetHeadByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, HelpDefine> _HelpByID = new Dictionary<int, HelpDefine>();
        public HelpDefine GetHelpByID(int ID, HelpDefine def = default(HelpDefine))
        {
            HelpDefine ret;
            if ( _HelpByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(HelpDefine) )
			{
				TableLogger.ErrorLine("GetHelpByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, HeroDefine> _HeroByID = new Dictionary<int, HeroDefine>();
        public HeroDefine GetHeroByID(int ID, HeroDefine def = default(HeroDefine))
        {
            HeroDefine ret;
            if ( _HeroByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(HeroDefine) )
			{
				TableLogger.ErrorLine("GetHeroByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, HorseColorDefine> _HorseColorByID = new Dictionary<int, HorseColorDefine>();
        public HorseColorDefine GetHorseColorByID(int ID, HorseColorDefine def = default(HorseColorDefine))
        {
            HorseColorDefine ret;
            if ( _HorseColorByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(HorseColorDefine) )
			{
				TableLogger.ErrorLine("GetHorseColorByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, HorseConfigDefine> _HorseConfigByID = new Dictionary<int, HorseConfigDefine>();
        public HorseConfigDefine GetHorseConfigByID(int ID, HorseConfigDefine def = default(HorseConfigDefine))
        {
            HorseConfigDefine ret;
            if ( _HorseConfigByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(HorseConfigDefine) )
			{
				TableLogger.ErrorLine("GetHorseConfigByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, HorsePracticeDefine> _HorsePracticeByID = new Dictionary<int, HorsePracticeDefine>();
        public HorsePracticeDefine GetHorsePracticeByID(int ID, HorsePracticeDefine def = default(HorsePracticeDefine))
        {
            HorsePracticeDefine ret;
            if ( _HorsePracticeByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(HorsePracticeDefine) )
			{
				TableLogger.ErrorLine("GetHorsePracticeByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, HorseSkillDefine> _HorseSkillByID = new Dictionary<int, HorseSkillDefine>();
        public HorseSkillDefine GetHorseSkillByID(int ID, HorseSkillDefine def = default(HorseSkillDefine))
        {
            HorseSkillDefine ret;
            if ( _HorseSkillByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(HorseSkillDefine) )
			{
				TableLogger.ErrorLine("GetHorseSkillByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, HorseStripeDefine> _HorseStripeByID = new Dictionary<int, HorseStripeDefine>();
        public HorseStripeDefine GetHorseStripeByID(int ID, HorseStripeDefine def = default(HorseStripeDefine))
        {
            HorseStripeDefine ret;
            if ( _HorseStripeByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(HorseStripeDefine) )
			{
				TableLogger.ErrorLine("GetHorseStripeByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, HumanFashionDefine> _HumanFashionByID = new Dictionary<int, HumanFashionDefine>();
        public HumanFashionDefine GetHumanFashionByID(int ID, HumanFashionDefine def = default(HumanFashionDefine))
        {
            HumanFashionDefine ret;
            if ( _HumanFashionByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(HumanFashionDefine) )
			{
				TableLogger.ErrorLine("GetHumanFashionByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, HumanSkillDefine> _HumanSkillByID = new Dictionary<int, HumanSkillDefine>();
        public HumanSkillDefine GetHumanSkillByID(int ID, HumanSkillDefine def = default(HumanSkillDefine))
        {
            HumanSkillDefine ret;
            if ( _HumanSkillByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(HumanSkillDefine) )
			{
				TableLogger.ErrorLine("GetHumanSkillByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, ItemDefine> _ItemByID = new Dictionary<int, ItemDefine>();
        public ItemDefine GetItemByID(int ID, ItemDefine def = default(ItemDefine))
        {
            ItemDefine ret;
            if ( _ItemByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(ItemDefine) )
			{
				TableLogger.ErrorLine("GetItemByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, ItemPackDefine> _ItemPackByID = new Dictionary<int, ItemPackDefine>();
        public ItemPackDefine GetItemPackByID(int ID, ItemPackDefine def = default(ItemPackDefine))
        {
            ItemPackDefine ret;
            if ( _ItemPackByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(ItemPackDefine) )
			{
				TableLogger.ErrorLine("GetItemPackByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, LanguageDefine> _LanguageByID = new Dictionary<int, LanguageDefine>();
        public LanguageDefine GetLanguageByID(int ID, LanguageDefine def = default(LanguageDefine))
        {
            LanguageDefine ret;
            if ( _LanguageByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(LanguageDefine) )
			{
				TableLogger.ErrorLine("GetLanguageByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, LittleGameDefine> _LittleGameByID = new Dictionary<int, LittleGameDefine>();
        public LittleGameDefine GetLittleGameByID(int ID, LittleGameDefine def = default(LittleGameDefine))
        {
            LittleGameDefine ret;
            if ( _LittleGameByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(LittleGameDefine) )
			{
				TableLogger.ErrorLine("GetLittleGameByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, MapSetDefine> _MapSetByID = new Dictionary<int, MapSetDefine>();
        public MapSetDefine GetMapSetByID(int ID, MapSetDefine def = default(MapSetDefine))
        {
            MapSetDefine ret;
            if ( _MapSetByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(MapSetDefine) )
			{
				TableLogger.ErrorLine("GetMapSetByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, MatchConfigDefine> _MatchConfigByID = new Dictionary<int, MatchConfigDefine>();
        public MatchConfigDefine GetMatchConfigByID(int ID, MatchConfigDefine def = default(MatchConfigDefine))
        {
            MatchConfigDefine ret;
            if ( _MatchConfigByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(MatchConfigDefine) )
			{
				TableLogger.ErrorLine("GetMatchConfigByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, MatchEffectTypeDefine> _MatchEffectTypeByID = new Dictionary<int, MatchEffectTypeDefine>();
        public MatchEffectTypeDefine GetMatchEffectTypeByID(int ID, MatchEffectTypeDefine def = default(MatchEffectTypeDefine))
        {
            MatchEffectTypeDefine ret;
            if ( _MatchEffectTypeByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(MatchEffectTypeDefine) )
			{
				TableLogger.ErrorLine("GetMatchEffectTypeByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, NormalShopDefine> _NormalShopByID = new Dictionary<int, NormalShopDefine>();
        public NormalShopDefine GetNormalShopByID(int ID, NormalShopDefine def = default(NormalShopDefine))
        {
            NormalShopDefine ret;
            if ( _NormalShopByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(NormalShopDefine) )
			{
				TableLogger.ErrorLine("GetNormalShopByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, NoviceguideDefine> _NoviceguideByID = new Dictionary<int, NoviceguideDefine>();
        public NoviceguideDefine GetNoviceguideByID(int ID, NoviceguideDefine def = default(NoviceguideDefine))
        {
            NoviceguideDefine ret;
            if ( _NoviceguideByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(NoviceguideDefine) )
			{
				TableLogger.ErrorLine("GetNoviceguideByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, OfficialMatchDefine> _OfficialMatchByID = new Dictionary<int, OfficialMatchDefine>();
        public OfficialMatchDefine GetOfficialMatchByID(int ID, OfficialMatchDefine def = default(OfficialMatchDefine))
        {
            OfficialMatchDefine ret;
            if ( _OfficialMatchByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(OfficialMatchDefine) )
			{
				TableLogger.ErrorLine("GetOfficialMatchByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, RandomNameDefine> _RandomNameByID = new Dictionary<int, RandomNameDefine>();
        public RandomNameDefine GetRandomNameByID(int ID, RandomNameDefine def = default(RandomNameDefine))
        {
            RandomNameDefine ret;
            if ( _RandomNameByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(RandomNameDefine) )
			{
				TableLogger.ErrorLine("GetRandomNameByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, RechargeDefine> _RechargeByID = new Dictionary<int, RechargeDefine>();
        public RechargeDefine GetRechargeByID(int ID, RechargeDefine def = default(RechargeDefine))
        {
            RechargeDefine ret;
            if ( _RechargeByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(RechargeDefine) )
			{
				TableLogger.ErrorLine("GetRechargeByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, RobotDefine> _RobotByID = new Dictionary<int, RobotDefine>();
        public RobotDefine GetRobotByID(int ID, RobotDefine def = default(RobotDefine))
        {
            RobotDefine ret;
            if ( _RobotByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(RobotDefine) )
			{
				TableLogger.ErrorLine("GetRobotByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, RobotHorseDefine> _RobotHorseByID = new Dictionary<int, RobotHorseDefine>();
        public RobotHorseDefine GetRobotHorseByID(int ID, RobotHorseDefine def = default(RobotHorseDefine))
        {
            RobotHorseDefine ret;
            if ( _RobotHorseByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(RobotHorseDefine) )
			{
				TableLogger.ErrorLine("GetRobotHorseByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, SecondaryAttributeDefine> _SecondaryAttributeByID = new Dictionary<int, SecondaryAttributeDefine>();
        public SecondaryAttributeDefine GetSecondaryAttributeByID(int ID, SecondaryAttributeDefine def = default(SecondaryAttributeDefine))
        {
            SecondaryAttributeDefine ret;
            if ( _SecondaryAttributeByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(SecondaryAttributeDefine) )
			{
				TableLogger.ErrorLine("GetSecondaryAttributeByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, SellHorseDefine> _SellHorseByID = new Dictionary<int, SellHorseDefine>();
        public SellHorseDefine GetSellHorseByID(int ID, SellHorseDefine def = default(SellHorseDefine))
        {
            SellHorseDefine ret;
            if ( _SellHorseByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(SellHorseDefine) )
			{
				TableLogger.ErrorLine("GetSellHorseByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, SignDefine> _SignByID = new Dictionary<int, SignDefine>();
        public SignDefine GetSignByID(int ID, SignDefine def = default(SignDefine))
        {
            SignDefine ret;
            if ( _SignByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(SignDefine) )
			{
				TableLogger.ErrorLine("GetSignByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, SteptableDefine> _SteptableByID = new Dictionary<int, SteptableDefine>();
        public SteptableDefine GetSteptableByID(int ID, SteptableDefine def = default(SteptableDefine))
        {
            SteptableDefine ret;
            if ( _SteptableByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(SteptableDefine) )
			{
				TableLogger.ErrorLine("GetSteptableByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, StudDefine> _StudByID = new Dictionary<int, StudDefine>();
        public StudDefine GetStudByID(int ID, StudDefine def = default(StudDefine))
        {
            StudDefine ret;
            if ( _StudByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(StudDefine) )
			{
				TableLogger.ErrorLine("GetStudByID failed, ID: {0}", ID);
			}

            return def;
        }
		
	
		#endregion
		#region Deserialize code
		
		static tabtoy.DeserializeHandler<Config> ConfigDeserializeHandler = new tabtoy.DeserializeHandler<Config>(Deserialize);
		public static void Deserialize( Config ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0000:
                	{
						ins.AIValue.Add( reader.ReadStruct<AIValueDefine>(AIValueDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0001:
                	{
						ins.Ancestry.Add( reader.ReadStruct<AncestryDefine>(AncestryDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0002:
                	{
						ins.AuctionHorse.Add( reader.ReadStruct<AuctionHorseDefine>(AuctionHorseDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0003:
                	{
						ins.Base.Add( reader.ReadStruct<BaseDefine>(BaseDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0004:
                	{
						ins.Buff.Add( reader.ReadStruct<BuffDefine>(BuffDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0005:
                	{
						ins.Challenge.Add( reader.ReadStruct<ChallengeDefine>(ChallengeDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0006:
                	{
						ins.Currency.Add( reader.ReadStruct<CurrencyDefine>(CurrencyDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0007:
                	{
						ins.Equipment.Add( reader.ReadStruct<EquipmentDefine>(EquipmentDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0008:
                	{
						ins.Gene.Add( reader.ReadStruct<GeneDefine>(GeneDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0009:
                	{
						ins.GuildIcon.Add( reader.ReadStruct<GuildIconDefine>(GuildIconDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa000a:
                	{
						ins.Head.Add( reader.ReadStruct<HeadDefine>(HeadDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa000b:
                	{
						ins.Help.Add( reader.ReadStruct<HelpDefine>(HelpDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa000c:
                	{
						ins.Hero.Add( reader.ReadStruct<HeroDefine>(HeroDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa000d:
                	{
						ins.HorseColor.Add( reader.ReadStruct<HorseColorDefine>(HorseColorDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa000e:
                	{
						ins.HorseConfig.Add( reader.ReadStruct<HorseConfigDefine>(HorseConfigDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa000f:
                	{
						ins.HorsePractice.Add( reader.ReadStruct<HorsePracticeDefine>(HorsePracticeDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0010:
                	{
						ins.HorseSkill.Add( reader.ReadStruct<HorseSkillDefine>(HorseSkillDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0011:
                	{
						ins.HorseStripe.Add( reader.ReadStruct<HorseStripeDefine>(HorseStripeDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0012:
                	{
						ins.HumanFashion.Add( reader.ReadStruct<HumanFashionDefine>(HumanFashionDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0013:
                	{
						ins.HumanSkill.Add( reader.ReadStruct<HumanSkillDefine>(HumanSkillDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0014:
                	{
						ins.Item.Add( reader.ReadStruct<ItemDefine>(ItemDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0015:
                	{
						ins.ItemPack.Add( reader.ReadStruct<ItemPackDefine>(ItemPackDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0016:
                	{
						ins.Language.Add( reader.ReadStruct<LanguageDefine>(LanguageDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0017:
                	{
						ins.LittleGame.Add( reader.ReadStruct<LittleGameDefine>(LittleGameDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0018:
                	{
						ins.MapSet.Add( reader.ReadStruct<MapSetDefine>(MapSetDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0019:
                	{
						ins.MatchConfig.Add( reader.ReadStruct<MatchConfigDefine>(MatchConfigDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa001a:
                	{
						ins.MatchEffectType.Add( reader.ReadStruct<MatchEffectTypeDefine>(MatchEffectTypeDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa001b:
                	{
						ins.NormalShop.Add( reader.ReadStruct<NormalShopDefine>(NormalShopDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa001c:
                	{
						ins.Noviceguide.Add( reader.ReadStruct<NoviceguideDefine>(NoviceguideDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa001d:
                	{
						ins.OfficialMatch.Add( reader.ReadStruct<OfficialMatchDefine>(OfficialMatchDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa001e:
                	{
						ins.RandomName.Add( reader.ReadStruct<RandomNameDefine>(RandomNameDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa001f:
                	{
						ins.RandomName1.Add( reader.ReadStruct<RandomName1Define>(RandomName1DefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0020:
                	{
						ins.Recharge.Add( reader.ReadStruct<RechargeDefine>(RechargeDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0021:
                	{
						ins.Robot.Add( reader.ReadStruct<RobotDefine>(RobotDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0022:
                	{
						ins.RobotHorse.Add( reader.ReadStruct<RobotHorseDefine>(RobotHorseDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0023:
                	{
						ins.SecondaryAttribute.Add( reader.ReadStruct<SecondaryAttributeDefine>(SecondaryAttributeDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0024:
                	{
						ins.SellHorse.Add( reader.ReadStruct<SellHorseDefine>(SellHorseDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0025:
                	{
						ins.Sign.Add( reader.ReadStruct<SignDefine>(SignDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0026:
                	{
						ins.Steptable.Add( reader.ReadStruct<SteptableDefine>(SteptableDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0027:
                	{
						ins.Stud.Add( reader.ReadStruct<StudDefine>(StudDefineDeserializeHandler) );
                	}
                	break; 
                }
             }

			
			// Build AIValue Index
			for( int i = 0;i< ins.AIValue.Count;i++)
			{
				var element = ins.AIValue[i];
				
				ins._AIValueByID.Add(element.ID, element);
				
			}
			
			// Build Ancestry Index
			for( int i = 0;i< ins.Ancestry.Count;i++)
			{
				var element = ins.Ancestry[i];
				
				ins._AncestryByID.Add(element.ID, element);
				
			}
			
			// Build AuctionHorse Index
			for( int i = 0;i< ins.AuctionHorse.Count;i++)
			{
				var element = ins.AuctionHorse[i];
				
				ins._AuctionHorseByID.Add(element.ID, element);
				
			}
			
			// Build Base Index
			for( int i = 0;i< ins.Base.Count;i++)
			{
				var element = ins.Base[i];
				
				ins._BaseByID.Add(element.ID, element);
				
			}
			
			// Build Buff Index
			for( int i = 0;i< ins.Buff.Count;i++)
			{
				var element = ins.Buff[i];
				
				ins._BuffBySkillEffectID.Add(element.SkillEffectID, element);
				
			}
			
			// Build Challenge Index
			for( int i = 0;i< ins.Challenge.Count;i++)
			{
				var element = ins.Challenge[i];
				
				ins._ChallengeByID.Add(element.ID, element);
				
			}
			
			// Build Currency Index
			for( int i = 0;i< ins.Currency.Count;i++)
			{
				var element = ins.Currency[i];
				
				ins._CurrencyByID.Add(element.ID, element);
				
			}
			
			// Build Equipment Index
			for( int i = 0;i< ins.Equipment.Count;i++)
			{
				var element = ins.Equipment[i];
				
				ins._EquipmentByID.Add(element.ID, element);
				
			}
			
			// Build Gene Index
			for( int i = 0;i< ins.Gene.Count;i++)
			{
				var element = ins.Gene[i];
				
				ins._GeneByID.Add(element.ID, element);
				
			}
			
			// Build GuildIcon Index
			for( int i = 0;i< ins.GuildIcon.Count;i++)
			{
				var element = ins.GuildIcon[i];
				
				ins._GuildIconByID.Add(element.ID, element);
				
			}
			
			// Build Head Index
			for( int i = 0;i< ins.Head.Count;i++)
			{
				var element = ins.Head[i];
				
				ins._HeadByID.Add(element.ID, element);
				
			}
			
			// Build Help Index
			for( int i = 0;i< ins.Help.Count;i++)
			{
				var element = ins.Help[i];
				
				ins._HelpByID.Add(element.ID, element);
				
			}
			
			// Build Hero Index
			for( int i = 0;i< ins.Hero.Count;i++)
			{
				var element = ins.Hero[i];
				
				ins._HeroByID.Add(element.ID, element);
				
			}
			
			// Build HorseColor Index
			for( int i = 0;i< ins.HorseColor.Count;i++)
			{
				var element = ins.HorseColor[i];
				
				ins._HorseColorByID.Add(element.ID, element);
				
			}
			
			// Build HorseConfig Index
			for( int i = 0;i< ins.HorseConfig.Count;i++)
			{
				var element = ins.HorseConfig[i];
				
				ins._HorseConfigByID.Add(element.ID, element);
				
			}
			
			// Build HorsePractice Index
			for( int i = 0;i< ins.HorsePractice.Count;i++)
			{
				var element = ins.HorsePractice[i];
				
				ins._HorsePracticeByID.Add(element.ID, element);
				
			}
			
			// Build HorseSkill Index
			for( int i = 0;i< ins.HorseSkill.Count;i++)
			{
				var element = ins.HorseSkill[i];
				
				ins._HorseSkillByID.Add(element.ID, element);
				
			}
			
			// Build HorseStripe Index
			for( int i = 0;i< ins.HorseStripe.Count;i++)
			{
				var element = ins.HorseStripe[i];
				
				ins._HorseStripeByID.Add(element.ID, element);
				
			}
			
			// Build HumanFashion Index
			for( int i = 0;i< ins.HumanFashion.Count;i++)
			{
				var element = ins.HumanFashion[i];
				
				ins._HumanFashionByID.Add(element.ID, element);
				
			}
			
			// Build HumanSkill Index
			for( int i = 0;i< ins.HumanSkill.Count;i++)
			{
				var element = ins.HumanSkill[i];
				
				ins._HumanSkillByID.Add(element.ID, element);
				
			}
			
			// Build Item Index
			for( int i = 0;i< ins.Item.Count;i++)
			{
				var element = ins.Item[i];
				
				ins._ItemByID.Add(element.ID, element);
				
			}
			
			// Build ItemPack Index
			for( int i = 0;i< ins.ItemPack.Count;i++)
			{
				var element = ins.ItemPack[i];
				
				ins._ItemPackByID.Add(element.ID, element);
				
			}
			
			// Build Language Index
			for( int i = 0;i< ins.Language.Count;i++)
			{
				var element = ins.Language[i];
				
				ins._LanguageByID.Add(element.ID, element);
				
			}
			
			// Build LittleGame Index
			for( int i = 0;i< ins.LittleGame.Count;i++)
			{
				var element = ins.LittleGame[i];
				
				ins._LittleGameByID.Add(element.ID, element);
				
			}
			
			// Build MapSet Index
			for( int i = 0;i< ins.MapSet.Count;i++)
			{
				var element = ins.MapSet[i];
				
				ins._MapSetByID.Add(element.ID, element);
				
			}
			
			// Build MatchConfig Index
			for( int i = 0;i< ins.MatchConfig.Count;i++)
			{
				var element = ins.MatchConfig[i];
				
				ins._MatchConfigByID.Add(element.ID, element);
				
			}
			
			// Build MatchEffectType Index
			for( int i = 0;i< ins.MatchEffectType.Count;i++)
			{
				var element = ins.MatchEffectType[i];
				
				ins._MatchEffectTypeByID.Add(element.ID, element);
				
			}
			
			// Build NormalShop Index
			for( int i = 0;i< ins.NormalShop.Count;i++)
			{
				var element = ins.NormalShop[i];
				
				ins._NormalShopByID.Add(element.ID, element);
				
			}
			
			// Build Noviceguide Index
			for( int i = 0;i< ins.Noviceguide.Count;i++)
			{
				var element = ins.Noviceguide[i];
				
				ins._NoviceguideByID.Add(element.ID, element);
				
			}
			
			// Build OfficialMatch Index
			for( int i = 0;i< ins.OfficialMatch.Count;i++)
			{
				var element = ins.OfficialMatch[i];
				
				ins._OfficialMatchByID.Add(element.ID, element);
				
			}
			
			// Build RandomName Index
			for( int i = 0;i< ins.RandomName.Count;i++)
			{
				var element = ins.RandomName[i];
				
				ins._RandomNameByID.Add(element.ID, element);
				
			}
			
			// Build Recharge Index
			for( int i = 0;i< ins.Recharge.Count;i++)
			{
				var element = ins.Recharge[i];
				
				ins._RechargeByID.Add(element.ID, element);
				
			}
			
			// Build Robot Index
			for( int i = 0;i< ins.Robot.Count;i++)
			{
				var element = ins.Robot[i];
				
				ins._RobotByID.Add(element.ID, element);
				
			}
			
			// Build RobotHorse Index
			for( int i = 0;i< ins.RobotHorse.Count;i++)
			{
				var element = ins.RobotHorse[i];
				
				ins._RobotHorseByID.Add(element.ID, element);
				
			}
			
			// Build SecondaryAttribute Index
			for( int i = 0;i< ins.SecondaryAttribute.Count;i++)
			{
				var element = ins.SecondaryAttribute[i];
				
				ins._SecondaryAttributeByID.Add(element.ID, element);
				
			}
			
			// Build SellHorse Index
			for( int i = 0;i< ins.SellHorse.Count;i++)
			{
				var element = ins.SellHorse[i];
				
				ins._SellHorseByID.Add(element.ID, element);
				
			}
			
			// Build Sign Index
			for( int i = 0;i< ins.Sign.Count;i++)
			{
				var element = ins.Sign[i];
				
				ins._SignByID.Add(element.ID, element);
				
			}
			
			// Build Steptable Index
			for( int i = 0;i< ins.Steptable.Count;i++)
			{
				var element = ins.Steptable[i];
				
				ins._SteptableByID.Add(element.ID, element);
				
			}
			
			// Build Stud Index
			for( int i = 0;i< ins.Stud.Count;i++)
			{
				var element = ins.Stud[i];
				
				ins._StudByID.Add(element.ID, element);
				
			}
			
		}
		static tabtoy.DeserializeHandler<ItemPackGroup> ItemPackGroupDeserializeHandler = new tabtoy.DeserializeHandler<ItemPackGroup>(Deserialize);
		public static void Deserialize( ItemPackGroup ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ItemId = reader.ReadInt32();
                	}
                	break; 
                	case 0x20001:
                	{
						ins.Count = reader.ReadInt64();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.Weight = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.GroupId = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<RankingAward> RankingAwardDeserializeHandler = new tabtoy.DeserializeHandler<RankingAward>(Deserialize);
		public static void Deserialize( RankingAward ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.StartRanking = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.EndRanking = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.ItemPackId = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<DropShow> DropShowDeserializeHandler = new tabtoy.DeserializeHandler<DropShow>(Deserialize);
		public static void Deserialize( DropShow ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.DropID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.DropNumber = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<GrowRandom> GrowRandomDeserializeHandler = new tabtoy.DeserializeHandler<GrowRandom>(Deserialize);
		public static void Deserialize( GrowRandom ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.GrowType = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.GrowRate = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.GrowMin = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.GrowMax = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<EquipmentExtend> EquipmentExtendDeserializeHandler = new tabtoy.DeserializeHandler<EquipmentExtend>(Deserialize);
		public static void Deserialize( EquipmentExtend ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ExtendType = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.ExtendRate = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.AttributeMin = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.AttributeMax = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.SkillID = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<MapVector> MapVectorDeserializeHandler = new tabtoy.DeserializeHandler<MapVector>(Deserialize);
		public static void Deserialize( MapVector ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.VectorX = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.VectorY = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<EquipmentMaterialList> EquipmentMaterialListDeserializeHandler = new tabtoy.DeserializeHandler<EquipmentMaterialList>(Deserialize);
		public static void Deserialize( EquipmentMaterialList ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.MaterialID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.MaterialNumber = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<GuideHandle> GuideHandleDeserializeHandler = new tabtoy.DeserializeHandler<GuideHandle>(Deserialize);
		public static void Deserialize( GuideHandle ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.type = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.info = reader.ReadString();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.x = reader.ReadFloat();
                	}
                	break; 
                	case 0x50003:
                	{
						ins.y = reader.ReadFloat();
                	}
                	break; 
                	case 0x50004:
                	{
						ins.x1 = reader.ReadFloat();
                	}
                	break; 
                	case 0x50005:
                	{
						ins.y1 = reader.ReadFloat();
                	}
                	break; 
                	case 0x50006:
                	{
						ins.rotationZ = reader.ReadFloat();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.hollowType = reader.ReadInt32();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.width = reader.ReadInt32();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.height = reader.ReadInt32();
                	}
                	break; 
                	case 0x6000a:
                	{
						ins.path = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<GameAttributeDisplay> GameAttributeDisplayDeserializeHandler = new tabtoy.DeserializeHandler<GameAttributeDisplay>(Deserialize);
		public static void Deserialize( GameAttributeDisplay ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.属性类型 = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.属性上限 = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.属性下限 = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<AIValueDefine> AIValueDefineDeserializeHandler = new tabtoy.DeserializeHandler<AIValueDefine>(Deserialize);
		public static void Deserialize( AIValueDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.KeyName = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.Desc = reader.ReadString();
                	}
                	break; 
                	case 0x50003:
                	{
						ins.value = reader.ReadFloat();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<AncestryDefine> AncestryDefineDeserializeHandler = new tabtoy.DeserializeHandler<AncestryDefine>(Deserialize);
		public static void Deserialize( AncestryDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Type = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.Level = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.introduce = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.Name = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.SpeedBasic.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x10006:
                	{
						ins.SpeedMax.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x10007:
                	{
						ins.EnduranceBasic.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x10008:
                	{
						ins.EnduranceMax.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x10009:
                	{
						ins.BurstBasic.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x1000a:
                	{
						ins.BurstMax.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x1000b:
                	{
						ins.BalanceBasic.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x1000c:
                	{
						ins.BalanceMax.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x6000d:
                	{
						ins.Model = reader.ReadString();
                	}
                	break; 
                	case 0x1000e:
                	{
						ins.Map = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000f:
                	{
						ins.HorseBodyRSlice = reader.ReadInt32();
                	}
                	break; 
                	case 0x10010:
                	{
						ins.MaleRate = reader.ReadInt32();
                	}
                	break; 
                	case 0x50011:
                	{
						ins.ShiftStrength = reader.ReadFloat();
                	}
                	break; 
                	case 0x10012:
                	{
						ins.FemaleRate = reader.ReadInt32();
                	}
                	break; 
                	case 0x50013:
                	{
						ins.EvolutionRate = reader.ReadFloat();
                	}
                	break; 
                	case 0x10014:
                	{
						ins.EvolutionID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60015:
                	{
						ins.Head = reader.ReadString();
                	}
                	break; 
                	case 0x50016:
                	{
						ins.TattooStrength = reader.ReadFloat();
                	}
                	break; 
                	case 0x10017:
                	{
						ins.TattoColor = reader.ReadInt32();
                	}
                	break; 
                	case 0x10018:
                	{
						ins.ColorSet.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x60019:
                	{
						ins.Manemap = reader.ReadString();
                	}
                	break; 
                	case 0x1001a:
                	{
						ins.Mane_SpecColor.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x5001b:
                	{
						ins.Mane_SP = reader.ReadFloat();
                	}
                	break; 
                	case 0x5001c:
                	{
						ins.Mane_GL = reader.ReadFloat();
                	}
                	break; 
                	case 0x5001d:
                	{
						ins.Mane_strength = reader.ReadFloat();
                	}
                	break; 
                	case 0x1001e:
                	{
						ins.SpecularColor.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x1001f:
                	{
						ins.AnisotropyFalloff = reader.ReadInt32();
                	}
                	break; 
                	case 0x50020:
                	{
						ins.AnisotropyOffset = reader.ReadFloat();
                	}
                	break; 
                	case 0x50021:
                	{
						ins.AnisotropyStrength = reader.ReadFloat();
                	}
                	break; 
                	case 0x10022:
                	{
						ins.Lowestgrade = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<AuctionHorseDefine> AuctionHorseDefineDeserializeHandler = new tabtoy.DeserializeHandler<AuctionHorseDefine>(Deserialize);
		public static void Deserialize( AuctionHorseDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Desc = reader.ReadString();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.param1.Add( reader.ReadFloat() );
                	}
                	break; 
                	case 0x20003:
                	{
						ins.param2.Add( reader.ReadInt64() );
                	}
                	break; 
                	case 0x10004:
                	{
						ins.param3 = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.param4.Add( reader.ReadInt32() );
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<BaseDefine> BaseDefineDeserializeHandler = new tabtoy.DeserializeHandler<BaseDefine>(Deserialize);
		public static void Deserialize( BaseDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Desc = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.param1 = reader.ReadInt32();
                	}
                	break; 
                	case 0x20003:
                	{
						ins.param2.Add( reader.ReadInt64() );
                	}
                	break; 
                	case 0x60004:
                	{
						ins.param3 = reader.ReadString();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.param4.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x50006:
                	{
						ins.param5.Add( reader.ReadFloat() );
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<BuffDefine> BuffDefineDeserializeHandler = new tabtoy.DeserializeHandler<BuffDefine>(Deserialize);
		public static void Deserialize( BuffDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.SkillEffectID = reader.ReadInt32();
                	}
                	break; 
                	case 0x80001:
                	{
						ins.EffectTarget = (SkillEffectTarget)reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.EffectTime = reader.ReadInt32();
                	}
                	break; 
                	case 0x80003:
                	{
						ins.EffectAttribute = (AttributeType)reader.ReadInt32();
                	}
                	break; 
                	case 0x80004:
                	{
						ins.ValueType = (ValueType)reader.ReadInt32();
                	}
                	break; 
                	case 0x50005:
                	{
						ins.Value = reader.ReadFloat();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<ChallengeDefine> ChallengeDefineDeserializeHandler = new tabtoy.DeserializeHandler<ChallengeDefine>(Deserialize);
		public static void Deserialize( ChallengeDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Length = reader.ReadInt32();
                	}
                	break; 
                	case 0x80002:
                	{
						ins.Weather = (SkillTriggerContent)reader.ReadInt32();
                	}
                	break; 
                	case 0x80003:
                	{
						ins.Field = (SkillTriggerContent)reader.ReadInt32();
                	}
                	break; 
                	case 0x20004:
                	{
						ins.RobotUid.Add( reader.ReadInt64() );
                	}
                	break; 
                	case 0x10005:
                	{
						ins.FirstReward = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.Reward = reader.ReadInt32();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.Chapter = reader.ReadInt32();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.Before = reader.ReadInt32();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.Name = reader.ReadInt32();
                	}
                	break; 
                	case 0x9000a:
                	{
						ins.Vector = reader.ReadStruct<MapVector>(MapVectorDeserializeHandler);
                	}
                	break; 
                	case 0x1000b:
                	{
						ins.Scene = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000c:
                	{
						ins.PowerCost = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000d:
                	{
						ins.isBoss = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000e:
                	{
						ins.proposal = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000f:
                	{
						ins.unlockHorseLevel = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<CurrencyDefine> CurrencyDefineDeserializeHandler = new tabtoy.DeserializeHandler<CurrencyDefine>(Deserialize);
		public static void Deserialize( CurrencyDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Name = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.BigImage = reader.ReadString();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.describe = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.Quality = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<EquipmentDefine> EquipmentDefineDeserializeHandler = new tabtoy.DeserializeHandler<EquipmentDefine>(Deserialize);
		public static void Deserialize( EquipmentDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Part = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.SpeedBasic = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.SpeedMax = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.EnduranceBasic = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.EnduranceMax = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.BurstBasic = reader.ReadInt32();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.BurstMax = reader.ReadInt32();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.BalanceBasic = reader.ReadInt32();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.BalanceMax = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000a:
                	{
						ins.AppraisalTime = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000b:
                	{
						ins.CostType = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000c:
                	{
						ins.CostNumber = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000d:
                	{
						ins.Price = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000e:
                	{
						ins.Name = reader.ReadInt32();
                	}
                	break; 
                	case 0x6000f:
                	{
						ins.Image = reader.ReadString();
                	}
                	break; 
                	case 0x10010:
                	{
						ins.Level = reader.ReadInt32();
                	}
                	break; 
                	case 0x10011:
                	{
						ins.Quality = reader.ReadInt32();
                	}
                	break; 
                	case 0x90012:
                	{
						ins.MaterialList.Add( reader.ReadStruct<EquipmentMaterialList>(EquipmentMaterialListDeserializeHandler) );
                	}
                	break; 
                	case 0x90013:
                	{
						ins.Decompose.Add( reader.ReadStruct<EquipmentMaterialList>(EquipmentMaterialListDeserializeHandler) );
                	}
                	break; 
                	case 0x50014:
                	{
						ins.ComposeRate = reader.ReadFloat();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<GeneDefine> GeneDefineDeserializeHandler = new tabtoy.DeserializeHandler<GeneDefine>(Deserialize);
		public static void Deserialize( GeneDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Type = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.SpeedBasic = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.SpeedMax = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.EnduranceBasic = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.EnduranceMax = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.BurstBasic = reader.ReadInt32();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.BurstMax = reader.ReadInt32();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.BalanceBasic = reader.ReadInt32();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.BalanceMax = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000a:
                	{
						ins.MaleRate = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000b:
                	{
						ins.FemaleRate = reader.ReadInt32();
                	}
                	break; 
                	case 0x5000c:
                	{
						ins.MutationRate = reader.ReadFloat();
                	}
                	break; 
                	case 0x1000d:
                	{
						ins.MutationID = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000e:
                	{
						ins.Name = reader.ReadInt32();
                	}
                	break; 
                	case 0x6000f:
                	{
						ins.Image = reader.ReadString();
                	}
                	break; 
                	case 0x10010:
                	{
						ins.Level = reader.ReadInt32();
                	}
                	break; 
                	case 0x10011:
                	{
						ins.MaxLevel = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<GuildIconDefine> GuildIconDefineDeserializeHandler = new tabtoy.DeserializeHandler<GuildIconDefine>(Deserialize);
		public static void Deserialize( GuildIconDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.TopImage = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.MidImage = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.BotImage = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<HeadDefine> HeadDefineDeserializeHandler = new tabtoy.DeserializeHandler<HeadDefine>(Deserialize);
		public static void Deserialize( HeadDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Image = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<HelpDefine> HelpDefineDeserializeHandler = new tabtoy.DeserializeHandler<HelpDefine>(Deserialize);
		public static void Deserialize( HelpDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Question = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.Answer = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<HeroDefine> HeroDefineDeserializeHandler = new tabtoy.DeserializeHandler<HeroDefine>(Deserialize);
		public static void Deserialize( HeroDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Name = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<HorseColorDefine> HorseColorDefineDeserializeHandler = new tabtoy.DeserializeHandler<HorseColorDefine>(Deserialize);
		public static void Deserialize( HorseColorDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Quality = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.costItem = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.costNum = reader.ReadInt32();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.Tint = reader.ReadString();
                	}
                	break; 
                	case 0x60005:
                	{
						ins.Icon = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<HorseConfigDefine> HorseConfigDefineDeserializeHandler = new tabtoy.DeserializeHandler<HorseConfigDefine>(Deserialize);
		public static void Deserialize( HorseConfigDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Desc = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.param1 = reader.ReadInt32();
                	}
                	break; 
                	case 0x20003:
                	{
						ins.param2.Add( reader.ReadInt64() );
                	}
                	break; 
                	case 0x60004:
                	{
						ins.param3 = reader.ReadString();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.param4.Add( reader.ReadInt32() );
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<HorsePracticeDefine> HorsePracticeDefineDeserializeHandler = new tabtoy.DeserializeHandler<HorsePracticeDefine>(Deserialize);
		public static void Deserialize( HorsePracticeDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.AttributeType = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.CostType = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.CostNumber = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.Name = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.Image = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<HorseSkillDefine> HorseSkillDefineDeserializeHandler = new tabtoy.DeserializeHandler<HorseSkillDefine>(Deserialize);
		public static void Deserialize( HorseSkillDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x80001:
                	{
						ins.TriggerType = (SkillTriggerType)reader.ReadInt32();
                	}
                	break; 
                	case 0x80002:
                	{
						ins.Trigger = (SkillTriggerContent)reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.TriggerNumber = reader.ReadInt32();
                	}
                	break; 
                	case 0x50004:
                	{
						ins.TriggerProbability = reader.ReadFloat();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.BuffID.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x80006:
                	{
						ins.SkillType = (HorseSkillType)reader.ReadInt32();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.Name = reader.ReadInt32();
                	}
                	break; 
                	case 0x60008:
                	{
						ins.Image = reader.ReadString();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.Describe = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000a:
                	{
						ins.Quality = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000b:
                	{
						ins.BattlePoint = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000c:
                	{
						ins.ExistTime = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000d:
                	{
						ins.LearnNeed = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<HorseStripeDefine> HorseStripeDefineDeserializeHandler = new tabtoy.DeserializeHandler<HorseStripeDefine>(Deserialize);
		public static void Deserialize( HorseStripeDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Model = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.Name = reader.ReadInt32();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.Image = reader.ReadString();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.Describe = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.Quality = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.costItem = reader.ReadInt32();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.costNum = reader.ReadInt32();
                	}
                	break; 
                	case 0x50008:
                	{
						ins.scale.Add( reader.ReadFloat() );
                	}
                	break; 
                	case 0x50009:
                	{
						ins.offset.Add( reader.ReadFloat() );
                	}
                	break; 
                	case 0x5000a:
                	{
						ins.rotation.Add( reader.ReadFloat() );
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<HumanFashionDefine> HumanFashionDefineDeserializeHandler = new tabtoy.DeserializeHandler<HumanFashionDefine>(Deserialize);
		public static void Deserialize( HumanFashionDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.TimeType = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.Time = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.Sex = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.Show = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.Name = reader.ReadInt32();
                	}
                	break; 
                	case 0x60006:
                	{
						ins.Image = reader.ReadString();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.Describe = reader.ReadInt32();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.SaleType = reader.ReadInt32();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.Price = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000a:
                	{
						ins.Quality = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000b:
                	{
						ins.TextureArrayIndex = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<HumanSkillDefine> HumanSkillDefineDeserializeHandler = new tabtoy.DeserializeHandler<HumanSkillDefine>(Deserialize);
		public static void Deserialize( HumanSkillDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x80001:
                	{
						ins.Trigger = (SkillTriggerContent)reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.AttributePart = reader.ReadInt32();
                	}
                	break; 
                	case 0x80003:
                	{
						ins.AttributeType = (AttributeType)reader.ReadInt32();
                	}
                	break; 
                	case 0x80004:
                	{
						ins.ValueType = (ValueType)reader.ReadInt32();
                	}
                	break; 
                	case 0x50005:
                	{
						ins.BasicNumber = reader.ReadFloat();
                	}
                	break; 
                	case 0x50006:
                	{
						ins.LevelNumber = reader.ReadFloat();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.MaxLevel = reader.ReadInt32();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.Name = reader.ReadInt32();
                	}
                	break; 
                	case 0x60009:
                	{
						ins.Image = reader.ReadString();
                	}
                	break; 
                	case 0x1000a:
                	{
						ins.Describe = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000b:
                	{
						ins.LevelBattlePoint = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000c:
                	{
						ins.LevelList.Add( reader.ReadInt32() );
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<ItemDefine> ItemDefineDeserializeHandler = new tabtoy.DeserializeHandler<ItemDefine>(Deserialize);
		public static void Deserialize( ItemDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Type = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.MaxNumber = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.PackageContent = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.Name = reader.ReadInt32();
                	}
                	break; 
                	case 0x60005:
                	{
						ins.Image = reader.ReadString();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.Describe = reader.ReadInt32();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.Quality = reader.ReadInt32();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.SaleType = reader.ReadInt32();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.Price = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000a:
                	{
						ins.AccessWay1 = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000b:
                	{
						ins.AccessWay2 = reader.ReadInt32();
                	}
                	break; 
                	case 0x6000c:
                	{
						ins.daojumingzi = reader.ReadString();
                	}
                	break; 
                	case 0x6000d:
                	{
						ins.daojujieshi = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<ItemPackDefine> ItemPackDefineDeserializeHandler = new tabtoy.DeserializeHandler<ItemPackDefine>(Deserialize);
		public static void Deserialize( ItemPackDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x90001:
                	{
						ins.Show.Add( reader.ReadStruct<DropShow>(DropShowDeserializeHandler) );
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<LanguageDefine> LanguageDefineDeserializeHandler = new tabtoy.DeserializeHandler<LanguageDefine>(Deserialize);
		public static void Deserialize( LanguageDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Chinese = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.English = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<LittleGameDefine> LittleGameDefineDeserializeHandler = new tabtoy.DeserializeHandler<LittleGameDefine>(Deserialize);
		public static void Deserialize( LittleGameDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.type = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.Level = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.difficulty.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x10005:
                	{
						ins.operation = reader.ReadInt32();
                	}
                	break; 
                	case 0x90006:
                	{
						ins.Displayattribute.Add( reader.ReadStruct<GameAttributeDisplay>(GameAttributeDisplayDeserializeHandler) );
                	}
                	break; 
                	case 0x10007:
                	{
						ins.DropPackback = reader.ReadInt32();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.describe = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<MapSetDefine> MapSetDefineDeserializeHandler = new tabtoy.DeserializeHandler<MapSetDefine>(Deserialize);
		public static void Deserialize( MapSetDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Scene = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.Race1200 = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.Bin1200 = reader.ReadString();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.Race1600 = reader.ReadString();
                	}
                	break; 
                	case 0x60005:
                	{
						ins.Bin1600 = reader.ReadString();
                	}
                	break; 
                	case 0x60006:
                	{
						ins.Race2200 = reader.ReadString();
                	}
                	break; 
                	case 0x60007:
                	{
						ins.Bin2200 = reader.ReadString();
                	}
                	break; 
                	case 0x60008:
                	{
						ins.Race3000 = reader.ReadString();
                	}
                	break; 
                	case 0x60009:
                	{
						ins.Bin3000 = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<MatchConfigDefine> MatchConfigDefineDeserializeHandler = new tabtoy.DeserializeHandler<MatchConfigDefine>(Deserialize);
		public static void Deserialize( MatchConfigDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Desc = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.param1 = reader.ReadInt32();
                	}
                	break; 
                	case 0x20003:
                	{
						ins.param2.Add( reader.ReadInt64() );
                	}
                	break; 
                	case 0x60004:
                	{
						ins.param3 = reader.ReadString();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.param4.Add( reader.ReadInt32() );
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<MatchEffectTypeDefine> MatchEffectTypeDefineDeserializeHandler = new tabtoy.DeserializeHandler<MatchEffectTypeDefine>(Deserialize);
		public static void Deserialize( MatchEffectTypeDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x80001:
                	{
						ins.MatchEffectType = (SkillTriggerContent)reader.ReadInt32();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.Speed = reader.ReadFloat();
                	}
                	break; 
                	case 0x50003:
                	{
						ins.Burst = reader.ReadFloat();
                	}
                	break; 
                	case 0x50004:
                	{
						ins.Endurance = reader.ReadFloat();
                	}
                	break; 
                	case 0x50005:
                	{
						ins.Balance = reader.ReadFloat();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<NormalShopDefine> NormalShopDefineDeserializeHandler = new tabtoy.DeserializeHandler<NormalShopDefine>(Deserialize);
		public static void Deserialize( NormalShopDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x20001:
                	{
						ins.Items.Add( reader.ReadInt64() );
                	}
                	break; 
                	case 0x80002:
                	{
						ins.LimitType = (CommodityLimitType)reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.LimitTime = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.CurrencyID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.ShowPrice = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.CurrencyNumber = reader.ReadInt32();
                	}
                	break; 
                	case 0x20007:
                	{
						ins.StartSaleTime = reader.ReadInt64();
                	}
                	break; 
                	case 0x20008:
                	{
						ins.EndSaleTime = reader.ReadInt64();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.CommodityName = reader.ReadInt32();
                	}
                	break; 
                	case 0x6000a:
                	{
						ins.CommodityImage = reader.ReadString();
                	}
                	break; 
                	case 0x1000b:
                	{
						ins.CommodityText = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000c:
                	{
						ins.quality = reader.ReadInt32();
                	}
                	break; 
                	case 0x6000d:
                	{
						ins.Explain = reader.ReadString();
                	}
                	break; 
                	case 0x1000e:
                	{
						ins.Commoditytype = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<NoviceguideDefine> NoviceguideDefineDeserializeHandler = new tabtoy.DeserializeHandler<NoviceguideDefine>(Deserialize);
		public static void Deserialize( NoviceguideDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.SmallSteps.Add( reader.ReadInt32() );
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<OfficialMatchDefine> OfficialMatchDefineDeserializeHandler = new tabtoy.DeserializeHandler<OfficialMatchDefine>(Deserialize);
		public static void Deserialize( OfficialMatchDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Competitionseason = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.StartTime = reader.ReadString();
                	}
                	break; 
                	case 0x90003:
                	{
						ins.DayRaceNormalReward.Add( reader.ReadStruct<RankingAward>(RankingAwardDeserializeHandler) );
                	}
                	break; 
                	case 0x90004:
                	{
						ins.DayRaceFinalReward.Add( reader.ReadStruct<RankingAward>(RankingAwardDeserializeHandler) );
                	}
                	break; 
                	case 0x90005:
                	{
						ins.WeekRaceNormalReward.Add( reader.ReadStruct<RankingAward>(RankingAwardDeserializeHandler) );
                	}
                	break; 
                	case 0x90006:
                	{
						ins.WeekRaceFinalReward.Add( reader.ReadStruct<RankingAward>(RankingAwardDeserializeHandler) );
                	}
                	break; 
                	case 0x90007:
                	{
						ins.TryoutNormalReward.Add( reader.ReadStruct<RankingAward>(RankingAwardDeserializeHandler) );
                	}
                	break; 
                	case 0x90008:
                	{
						ins.TryoutFinalReward.Add( reader.ReadStruct<RankingAward>(RankingAwardDeserializeHandler) );
                	}
                	break; 
                	case 0x90009:
                	{
						ins.MonthRaceNormalReward.Add( reader.ReadStruct<RankingAward>(RankingAwardDeserializeHandler) );
                	}
                	break; 
                	case 0x9000a:
                	{
						ins.MonthRaceFinalReward.Add( reader.ReadStruct<RankingAward>(RankingAwardDeserializeHandler) );
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<RandomNameDefine> RandomNameDefineDeserializeHandler = new tabtoy.DeserializeHandler<RandomNameDefine>(Deserialize);
		public static void Deserialize( RandomNameDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.HumanNamePre = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.MaleName = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.FemaleName = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.HorseNamePre = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.HorseName = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<RandomName1Define> RandomName1DefineDeserializeHandler = new tabtoy.DeserializeHandler<RandomName1Define>(Deserialize);
		public static void Deserialize( RandomName1Define ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x60000:
                	{
						ins.HumanNamePre = reader.ReadString();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.MaleName = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.FemaleName = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<RechargeDefine> RechargeDefineDeserializeHandler = new tabtoy.DeserializeHandler<RechargeDefine>(Deserialize);
		public static void Deserialize( RechargeDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Money = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.CurrencyID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.CurrencyNumber = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.FirstTimeGet = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<RobotDefine> RobotDefineDeserializeHandler = new tabtoy.DeserializeHandler<RobotDefine>(Deserialize);
		public static void Deserialize( RobotDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x20001:
                	{
						ins.Uid = reader.ReadInt64();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.Name = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.Sex = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.Model = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.Latestfashion = reader.ReadInt32();
                	}
                	break; 
                	case 0x60006:
                	{
						ins.Image = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<RobotHorseDefine> RobotHorseDefineDeserializeHandler = new tabtoy.DeserializeHandler<RobotHorseDefine>(Deserialize);
		public static void Deserialize( RobotHorseDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.HorseID = reader.ReadInt32();
                	}
                	break; 
                	case 0x20002:
                	{
						ins.Uid = reader.ReadInt64();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.Speed = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.Endurance = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.Burst = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.Balance = reader.ReadInt32();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.Ancestry = reader.ReadInt32();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.Gene1 = reader.ReadInt32();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.Gene2 = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000a:
                	{
						ins.Gene3 = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000b:
                	{
						ins.Gene4 = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000c:
                	{
						ins.Skill1 = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000d:
                	{
						ins.Skill2 = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000e:
                	{
						ins.Skill3 = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000f:
                	{
						ins.Skill4 = reader.ReadInt32();
                	}
                	break; 
                	case 0x10010:
                	{
						ins.Name = reader.ReadInt32();
                	}
                	break; 
                	case 0x10011:
                	{
						ins.Skin = reader.ReadInt32();
                	}
                	break; 
                	case 0x60012:
                	{
						ins.Image = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<SecondaryAttributeDefine> SecondaryAttributeDefineDeserializeHandler = new tabtoy.DeserializeHandler<SecondaryAttributeDefine>(Deserialize);
		public static void Deserialize( SecondaryAttributeDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x50001:
                	{
						ins.BasicValue = reader.ReadFloat();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.BasicGrow = reader.ReadFloat();
                	}
                	break; 
                	case 0x50003:
                	{
						ins.MarginalDiminishing = reader.ReadFloat();
                	}
                	break; 
                	case 0x50004:
                	{
						ins.MinValue = reader.ReadFloat();
                	}
                	break; 
                	case 0x60005:
                	{
						ins.Remark = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<SellHorseDefine> SellHorseDefineDeserializeHandler = new tabtoy.DeserializeHandler<SellHorseDefine>(Deserialize);
		public static void Deserialize( SellHorseDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Ancestry = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.DefaultDnas.Add( reader.ReadInt32() );
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<SignDefine> SignDefineDeserializeHandler = new tabtoy.DeserializeHandler<SignDefine>(Deserialize);
		public static void Deserialize( SignDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.starttime = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.Endtime = reader.ReadString();
                	}
                	break; 
                	case 0x20003:
                	{
						ins.Monday.Add( reader.ReadInt64() );
                	}
                	break; 
                	case 0x20004:
                	{
						ins.Tuesday.Add( reader.ReadInt64() );
                	}
                	break; 
                	case 0x20005:
                	{
						ins.Wednesday.Add( reader.ReadInt64() );
                	}
                	break; 
                	case 0x20006:
                	{
						ins.Thursday.Add( reader.ReadInt64() );
                	}
                	break; 
                	case 0x20007:
                	{
						ins.Friday.Add( reader.ReadInt64() );
                	}
                	break; 
                	case 0x20008:
                	{
						ins.Saturday.Add( reader.ReadInt64() );
                	}
                	break; 
                	case 0x20009:
                	{
						ins.Sunday.Add( reader.ReadInt64() );
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<SteptableDefine> SteptableDefineDeserializeHandler = new tabtoy.DeserializeHandler<SteptableDefine>(Deserialize);
		public static void Deserialize( SteptableDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x70001:
                	{
						ins.Bad = reader.ReadBool();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.DelayFrame = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.SkipType = reader.ReadInt32();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.SkipInfo = reader.ReadString();
                	}
                	break; 
                	case 0x90005:
                	{
						ins.StartHandle = reader.ReadStruct<GuideHandle>(GuideHandleDeserializeHandler);
                	}
                	break; 
                	case 0x90006:
                	{
						ins.InitHandles.Add( reader.ReadStruct<GuideHandle>(GuideHandleDeserializeHandler) );
                	}
                	break; 
                	case 0x90007:
                	{
						ins.CompleteHandle = reader.ReadStruct<GuideHandle>(GuideHandleDeserializeHandler);
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<StudDefine> StudDefineDeserializeHandler = new tabtoy.DeserializeHandler<StudDefine>(Deserialize);
		public static void Deserialize( StudDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.HorseID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.CostID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.CostNumber = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		#endregion
	

	} 

	// Defined in table: Base
	[System.Serializable]
	public partial class ItemPackGroup
	{
	
		
		
		public int ItemId = 0; // 物品ID
		
		
		public long Count = 0; // 物品数量
		
		
		public int Weight = 0; // 物品权重
		
		
		public int GroupId = 0; // 物品分组
	
	

	} 

	// Defined in table: Base
	[System.Serializable]
	public partial class RankingAward
	{
	
		
		/// <summary> 
		/// 开始排名
		/// </summary>
		public int StartRanking = 0; // 开始排名
		
		/// <summary> 
		/// 结束排名
		/// </summary>
		public int EndRanking = 0; // 结束排名
		
		/// <summary> 
		/// 物品包ID
		/// </summary>
		public int ItemPackId = 0; // 物品包ID
	
	

	} 

	// Defined in table: Base
	[System.Serializable]
	public partial class DropShow
	{
	
		
		
		public int DropID = 0; // 展示ID
		
		
		public int DropNumber = 0; // 展示数量
	
	

	} 

	// Defined in table: Base
	[System.Serializable]
	public partial class GrowRandom
	{
	
		
		
		public int GrowType = 0; // 成长类型
		
		
		public int GrowRate = 0; // 类型权重
		
		
		public int GrowMin = 0; // 最低成长
		
		
		public int GrowMax = 0; // 最高成长
	
	

	} 

	// Defined in table: Base
	[System.Serializable]
	public partial class EquipmentExtend
	{
	
		
		
		public int ExtendType = 0; // 装备附加类型
		
		
		public int ExtendRate = 0; // 装备附加权重
		
		
		public int AttributeMin = 0; // 附加最低属性
		
		
		public int AttributeMax = 0; // 附加最高属性
		
		
		public int SkillID = 0; // 附加技能ID
	
	

	} 

	// Defined in table: Base
	[System.Serializable]
	public partial class MapVector
	{
	
		
		
		public int VectorX = 0; // 坐标X
		
		
		public int VectorY = 0; // 坐标Y
	
	

	} 

	// Defined in table: Base
	[System.Serializable]
	public partial class EquipmentMaterialList
	{
	
		
		
		public int MaterialID = 0; // 材料ID
		
		
		public int MaterialNumber = 0; // 材料数量
	
	

	} 

	// Defined in table: Base
	[System.Serializable]
	public partial class GuideHandle
	{
	
		
		/// <summary> 
		/// 对应GuideHandleType,
		/// </summary>
		public int type = -1; 
		
		/// <summary> 
		/// 文本
		/// </summary>
		public string info = ""; 
		
		/// <summary> 
		/// 坐标,偏移
		/// </summary>
		public float x = 0f; 
		
		
		public float y = 0f; 
		
		/// <summary> 
		/// 手偏移
		/// </summary>
		public float x1 = 0f; 
		
		
		public float y1 = 0f; 
		
		
		public float rotationZ = 0f; 
		
		/// <summary> 
		/// 镂空类型 0方形 1 三角型
		/// </summary>
		public int hollowType = 0; 
		
		/// <summary> 
		/// 宽
		/// </summary>
		public int width = 0; 
		
		/// <summary> 
		/// 高
		/// </summary>
		public int height = 0; 
		
		/// <summary> 
		/// ui路径,ui名字
		/// </summary>
		public string path = ""; 
	
	

	} 

	// Defined in table: Base
	[System.Serializable]
	public partial class GameAttributeDisplay
	{
	
		
		/// <summary> 
		/// 属性1速度2耐力3爆发4平衡
		/// </summary>
		public int 属性类型 = 0; // 类型
		
		
		public int 属性上限 = 0; // 上限
		
		
		public int 属性下限 = 0; // 下限
	
	

	} 

	// Defined in table: AIValue
	[System.Serializable]
	public partial class AIValueDefine
	{
	
		
		/// <summary> 
		/// 字段ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 字段名
		/// </summary>
		public string KeyName = ""; 
		
		/// <summary> 
		/// 字段描述
		/// </summary>
		public string Desc = ""; 
		
		/// <summary> 
		/// 值
		/// </summary>
		public float value = 0f; 
	
	

	} 

	// Defined in table: Ancestry
	[System.Serializable]
	public partial class AncestryDefine
	{
	
		
		/// <summary> 
		/// 血统ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 血统类型
		/// </summary>
		public int Type = 0; 
		
		/// <summary> 
		/// 血统等级
		/// </summary>
		public int Level = 0; 
		
		/// <summary> 
		/// 血统介绍
		/// </summary>
		public int introduce = 0; 
		
		/// <summary> 
		/// 血统名称
		/// </summary>
		public int Name = 0; 
		
		/// <summary> 
		/// 基础速度
		/// </summary>
		public List<int> SpeedBasic = new List<int>(); 
		
		/// <summary> 
		/// 上限速度
		/// </summary>
		public List<int> SpeedMax = new List<int>(); 
		
		/// <summary> 
		/// 基础耐力
		/// </summary>
		public List<int> EnduranceBasic = new List<int>(); 
		
		/// <summary> 
		/// 上限耐力
		/// </summary>
		public List<int> EnduranceMax = new List<int>(); 
		
		/// <summary> 
		/// 基础爆发
		/// </summary>
		public List<int> BurstBasic = new List<int>(); 
		
		/// <summary> 
		/// 上限爆发
		/// </summary>
		public List<int> BurstMax = new List<int>(); 
		
		/// <summary> 
		/// 基础平衡
		/// </summary>
		public List<int> BalanceBasic = new List<int>(); 
		
		/// <summary> 
		/// 上限平衡
		/// </summary>
		public List<int> BalanceMax = new List<int>(); 
		
		/// <summary> 
		/// 血统模型
		/// </summary>
		public string Model = ""; 
		
		/// <summary> 
		/// 血统贴图
		/// </summary>
		public int Map = 0; 
		
		/// <summary> 
		/// 血统高光贴图编号
		/// </summary>
		public int HorseBodyRSlice = 0; 
		
		/// <summary> 
		/// 种马遗传权重
		/// </summary>
		public int MaleRate = 0; 
		
		/// <summary> 
		/// 细节贴图强度
		/// </summary>
		public float ShiftStrength = 0f; 
		
		/// <summary> 
		/// 孕马遗传权重
		/// </summary>
		public int FemaleRate = 0; 
		
		/// <summary> 
		/// 血统纯化概率
		/// </summary>
		public float EvolutionRate = 0f; 
		
		/// <summary> 
		/// 纯化血统ID
		/// </summary>
		public int EvolutionID = 0; 
		
		/// <summary> 
		/// 马匹头像
		/// </summary>
		public string Head = ""; 
		
		/// <summary> 
		/// 纹身亮度强度
		/// </summary>
		public float TattooStrength = 0f; 
		
		/// <summary> 
		/// 纹身颜色
		/// </summary>
		public int TattoColor = 0; 
		
		/// <summary> 
		/// 染色颜色集合
		/// </summary>
		public List<int> ColorSet = new List<int>(); 
		
		/// <summary> 
		/// 鬃毛贴图
		/// </summary>
		public string Manemap = ""; 
		
		/// <summary> 
		/// 鬃毛的高光颜色
		/// </summary>
		public List<int> Mane_SpecColor = new List<int>(); 
		
		/// <summary> 
		/// 鬃毛高光
		/// </summary>
		public float Mane_SP = 0f; 
		
		/// <summary> 
		/// 鬃毛光泽度
		/// </summary>
		public float Mane_GL = 0f; 
		
		/// <summary> 
		/// 鬃毛高光强度
		/// </summary>
		public float Mane_strength = 0f; 
		
		/// <summary> 
		/// 血统高光颜色
		/// </summary>
		public List<int> SpecularColor = new List<int>(); 
		
		/// <summary> 
		/// AnisotropyFalloff
		/// </summary>
		public int AnisotropyFalloff = 0; 
		
		/// <summary> 
		/// AnisotropyOffset
		/// </summary>
		public float AnisotropyOffset = 0f; 
		
		/// <summary> 
		/// AnisotropyStrength
		/// </summary>
		public float AnisotropyStrength = 0f; 
		
		/// <summary> 
		/// 血统最低等级
		/// </summary>
		public int Lowestgrade = 0; 
	
	

	} 

	// Defined in table: AuctionHorse
	[System.Serializable]
	public partial class AuctionHorseDefine
	{
	
		
		/// <summary> 
		/// ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 注释
		/// </summary>
		public string Desc = ""; 
		
		/// <summary> 
		/// float数组类型
		/// </summary>
		public List<float> param1 = new List<float>(); 
		
		/// <summary> 
		/// int64数组类型
		/// </summary>
		public List<long> param2 = new List<long>(); 
		
		/// <summary> 
		/// int32类型
		/// </summary>
		public int param3 = 0; 
		
		/// <summary> 
		/// int32数组类型
		/// </summary>
		public List<int> param4 = new List<int>(); 
	
	

	} 

	// Defined in table: Base
	[System.Serializable]
	public partial class BaseDefine
	{
	
		
		/// <summary> 
		/// 字段名
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 字段描述
		/// </summary>
		public string Desc = ""; 
		
		/// <summary> 
		/// int类型
		/// </summary>
		public int param1 = 0; 
		
		/// <summary> 
		/// int数组类型
		/// </summary>
		public List<long> param2 = new List<long>(); 
		
		/// <summary> 
		/// string类型
		/// </summary>
		public string param3 = ""; 
		
		/// <summary> 
		/// int32数组类型
		/// </summary>
		public List<int> param4 = new List<int>(); 
		
		/// <summary> 
		/// float数组类型
		/// </summary>
		public List<float> param5 = new List<float>(); 
	
	

	} 

	// Defined in table: Buff
	[System.Serializable]
	public partial class BuffDefine
	{
	
		
		/// <summary> 
		/// 技能效果ID
		/// </summary>
		public int SkillEffectID = 0; 
		
		/// <summary> 
		/// 影响目标
		/// </summary>
		public SkillEffectTarget EffectTarget = SkillEffectTarget.Self; 
		
		/// <summary> 
		/// 影响时间（毫秒）
		/// </summary>
		public int EffectTime = 0; 
		
		/// <summary> 
		/// 影响属性
		/// </summary>
		public AttributeType EffectAttribute = AttributeType.Speed; 
		
		/// <summary> 
		/// 数值类型
		/// </summary>
		public ValueType ValueType = ValueType.Integer; 
		
		/// <summary> 
		/// 效果值
		/// </summary>
		public float Value = 0f; 
	
	

	} 

	// Defined in table: Challenge
	[System.Serializable]
	public partial class ChallengeDefine
	{
	
		
		/// <summary> 
		/// 关卡ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 赛程长度
		/// </summary>
		public int Length = 0; 
		
		/// <summary> 
		/// 比赛天气
		/// </summary>
		public SkillTriggerContent Weather = SkillTriggerContent.SunnyDay; 
		
		/// <summary> 
		/// 比赛场地
		/// </summary>
		public SkillTriggerContent Field = SkillTriggerContent.SunnyDay; 
		
		/// <summary> 
		/// 机器人UID
		/// </summary>
		public List<long> RobotUid = new List<long>(); 
		
		/// <summary> 
		/// 首次奖励内容
		/// </summary>
		public int FirstReward = 0; 
		
		/// <summary> 
		/// 奖励内容
		/// </summary>
		public int Reward = 0; 
		
		/// <summary> 
		/// 所属章节
		/// </summary>
		public int Chapter = 0; 
		
		/// <summary> 
		/// 前置关卡
		/// </summary>
		public int Before = 0; 
		
		/// <summary> 
		/// 关卡名称
		/// </summary>
		public int Name = 0; 
		
		/// <summary> 
		/// 关卡坐标
		/// </summary>
		public MapVector Vector = new MapVector(); 
		
		/// <summary> 
		/// 场景索引
		/// </summary>
		public int Scene = 0; 
		
		/// <summary> 
		/// 挑战消耗体力值
		/// </summary>
		public int PowerCost = 0; 
		
		/// <summary> 
		/// 是否boss关卡
		/// </summary>
		public int isBoss = 0; 
		
		/// <summary> 
		/// 推荐挑战实力
		/// </summary>
		public int proposal = 0; 
		
		/// <summary> 
		/// 解锁马匹等级(-1表示不会解锁)
		/// </summary>
		public int unlockHorseLevel = 0; 
	
	

	} 

	// Defined in table: Currency
	[System.Serializable]
	public partial class CurrencyDefine
	{
	
		
		/// <summary> 
		/// 道具ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 货币名称
		/// </summary>
		public int Name = 0; 
		
		/// <summary> 
		/// 货币大图标
		/// </summary>
		public string BigImage = ""; 
		
		/// <summary> 
		/// 货币描述
		/// </summary>
		public int describe = 0; 
		
		/// <summary> 
		/// 品质
		/// </summary>
		public int Quality = 0; 
	
	

	} 

	// Defined in table: Equipment
	[System.Serializable]
	public partial class EquipmentDefine
	{
	
		
		/// <summary> 
		/// 装备ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 装备部位
		/// </summary>
		public int Part = 0; 
		
		/// <summary> 
		/// 基础速度
		/// </summary>
		public int SpeedBasic = 0; 
		
		/// <summary> 
		/// 上限速度
		/// </summary>
		public int SpeedMax = 0; 
		
		/// <summary> 
		/// 基础耐力
		/// </summary>
		public int EnduranceBasic = 0; 
		
		/// <summary> 
		/// 上限耐力
		/// </summary>
		public int EnduranceMax = 0; 
		
		/// <summary> 
		/// 基础爆发
		/// </summary>
		public int BurstBasic = 0; 
		
		/// <summary> 
		/// 上限爆发
		/// </summary>
		public int BurstMax = 0; 
		
		/// <summary> 
		/// 基础平衡
		/// </summary>
		public int BalanceBasic = 0; 
		
		/// <summary> 
		/// 上限平衡
		/// </summary>
		public int BalanceMax = 0; 
		
		/// <summary> 
		/// 最大鉴定次数
		/// </summary>
		public int AppraisalTime = 0; 
		
		/// <summary> 
		/// 鉴定消耗货币类型
		/// </summary>
		public int CostType = 0; 
		
		/// <summary> 
		/// 重铸价格
		/// </summary>
		public int CostNumber = 0; 
		
		/// <summary> 
		/// 出售金币价格
		/// </summary>
		public int Price = 0; 
		
		/// <summary> 
		/// 装备名称
		/// </summary>
		public int Name = 0; 
		
		/// <summary> 
		/// 装备图标
		/// </summary>
		public string Image = ""; 
		
		/// <summary> 
		/// 装备等级
		/// </summary>
		public int Level = 0; 
		
		/// <summary> 
		/// 装备品质
		/// </summary>
		public int Quality = 0; 
		
		/// <summary> 
		/// 合成材料列表
		/// </summary>
		public List<EquipmentMaterialList> MaterialList = new List<EquipmentMaterialList>(); 
		
		/// <summary> 
		/// 分解产出
		/// </summary>
		public List<EquipmentMaterialList> Decompose = new List<EquipmentMaterialList>(); 
		
		/// <summary> 
		/// 合成成功几率
		/// </summary>
		public float ComposeRate = 0f; 
	
	

	} 

	// Defined in table: Gene
	[System.Serializable]
	public partial class GeneDefine
	{
	
		
		/// <summary> 
		/// 基因ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 基因类型
		/// </summary>
		public int Type = 0; 
		
		/// <summary> 
		/// 基础速度
		/// </summary>
		public int SpeedBasic = 0; 
		
		/// <summary> 
		/// 上限速度
		/// </summary>
		public int SpeedMax = 0; 
		
		/// <summary> 
		/// 基础耐力
		/// </summary>
		public int EnduranceBasic = 0; 
		
		/// <summary> 
		/// 上限耐力
		/// </summary>
		public int EnduranceMax = 0; 
		
		/// <summary> 
		/// 基础爆发
		/// </summary>
		public int BurstBasic = 0; 
		
		/// <summary> 
		/// 上限爆发
		/// </summary>
		public int BurstMax = 0; 
		
		/// <summary> 
		/// 基础平衡
		/// </summary>
		public int BalanceBasic = 0; 
		
		/// <summary> 
		/// 上限平衡
		/// </summary>
		public int BalanceMax = 0; 
		
		/// <summary> 
		/// 种马遗传权重
		/// </summary>
		public int MaleRate = 0; 
		
		/// <summary> 
		/// 孕马遗传权重
		/// </summary>
		public int FemaleRate = 0; 
		
		/// <summary> 
		/// 同基因突变概率
		/// </summary>
		public float MutationRate = 0f; 
		
		/// <summary> 
		/// 突变基因ID
		/// </summary>
		public int MutationID = 0; 
		
		/// <summary> 
		/// 基因名称
		/// </summary>
		public int Name = 0; 
		
		/// <summary> 
		/// 基因图标
		/// </summary>
		public string Image = ""; 
		
		/// <summary> 
		/// 基因星级
		/// </summary>
		public int Level = 0; 
		
		/// <summary> 
		/// 星级上限
		/// </summary>
		public int MaxLevel = 0; 
	
	

	} 

	// Defined in table: GuildIcon
	[System.Serializable]
	public partial class GuildIconDefine
	{
	
		
		/// <summary> 
		/// 头像ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 上半部图标
		/// </summary>
		public string TopImage = ""; 
		
		/// <summary> 
		/// 中部图标
		/// </summary>
		public string MidImage = ""; 
		
		/// <summary> 
		/// 下半部图标
		/// </summary>
		public string BotImage = ""; 
	
	

	} 

	// Defined in table: Head
	[System.Serializable]
	public partial class HeadDefine
	{
	
		
		/// <summary> 
		/// 头像ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 图片名称
		/// </summary>
		public string Image = ""; 
	
	

	} 

	// Defined in table: Help
	[System.Serializable]
	public partial class HelpDefine
	{
	
		
		/// <summary> 
		/// 帮助ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 提问内容
		/// </summary>
		public int Question = 0; 
		
		/// <summary> 
		/// 帮助内容
		/// </summary>
		public int Answer = 0; 
	
	

	} 

	// Defined in table: Hero
	[System.Serializable]
	public partial class HeroDefine
	{
	
		
		/// <summary> 
		/// 名人ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 名人名字
		/// </summary>
		public int Name = 0; 
	
	

	} 

	// Defined in table: HorseColor
	[System.Serializable]
	public partial class HorseColorDefine
	{
	
		
		/// <summary> 
		/// 皮肤ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 皮肤品质
		/// </summary>
		public int Quality = 0; 
		
		/// <summary> 
		/// 使用消耗物品
		/// </summary>
		public int costItem = 0; 
		
		/// <summary> 
		/// 使用消耗数据量
		/// </summary>
		public int costNum = 0; 
		
		/// <summary> 
		/// 颜色
		/// </summary>
		public string Tint = ""; 
		
		/// <summary> 
		/// 图标
		/// </summary>
		public string Icon = ""; 
	
	

	} 

	// Defined in table: HorseConfig
	[System.Serializable]
	public partial class HorseConfigDefine
	{
	
		
		/// <summary> 
		/// 字段名
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 字段描述
		/// </summary>
		public string Desc = ""; 
		
		/// <summary> 
		/// int类型
		/// </summary>
		public int param1 = 0; 
		
		/// <summary> 
		/// int64数组类型
		/// </summary>
		public List<long> param2 = new List<long>(); 
		
		/// <summary> 
		/// string类型
		/// </summary>
		public string param3 = ""; 
		
		/// <summary> 
		/// int32数组类型
		/// </summary>
		public List<int> param4 = new List<int>(); 
	
	

	} 

	// Defined in table: HorsePractice
	[System.Serializable]
	public partial class HorsePracticeDefine
	{
	
		
		/// <summary> 
		/// 训练方式ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 影响属性类型
		/// </summary>
		public int AttributeType = 0; 
		
		/// <summary> 
		/// 消耗类型
		/// </summary>
		public int CostType = 0; 
		
		/// <summary> 
		/// 消耗数量
		/// </summary>
		public int CostNumber = 0; 
		
		/// <summary> 
		/// 文字
		/// </summary>
		public int Name = 0; 
		
		/// <summary> 
		/// 图片
		/// </summary>
		public int Image = 0; 
	
	

	} 

	// Defined in table: HorseSkill
	[System.Serializable]
	public partial class HorseSkillDefine
	{
	
		
		/// <summary> 
		/// 技能ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 触发类型
		/// </summary>
		public SkillTriggerType TriggerType = SkillTriggerType.weatherTrigger; 
		
		/// <summary> 
		/// 触发具体条件
		/// </summary>
		public SkillTriggerContent Trigger = SkillTriggerContent.SunnyDay; 
		
		/// <summary> 
		/// 触发数值
		/// </summary>
		public int TriggerNumber = 0; 
		
		/// <summary> 
		/// 触发几率
		/// </summary>
		public float TriggerProbability = 0f; 
		
		/// <summary> 
		/// 技能效果ID
		/// </summary>
		public List<int> BuffID = new List<int>(); 
		
		/// <summary> 
		/// 技能类型
		/// </summary>
		public HorseSkillType SkillType = HorseSkillType.NatureSkill; 
		
		/// <summary> 
		/// 技能名称
		/// </summary>
		public int Name = 0; 
		
		/// <summary> 
		/// 技能图标
		/// </summary>
		public string Image = ""; 
		
		/// <summary> 
		/// 技能描述
		/// </summary>
		public int Describe = 0; 
		
		/// <summary> 
		/// 技能品质
		/// </summary>
		public int Quality = 0; 
		
		/// <summary> 
		/// 战力值
		/// </summary>
		public int BattlePoint = 0; 
		
		/// <summary> 
		/// 存续时间
		/// </summary>
		public int ExistTime = 0; 
		
		/// <summary> 
		/// 学习需求
		/// </summary>
		public int LearnNeed = 0; 
	
	

	} 

	// Defined in table: HorseStripe
	[System.Serializable]
	public partial class HorseStripeDefine
	{
	
		
		/// <summary> 
		/// 条纹ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 条纹贴图
		/// </summary>
		public int Model = 0; 
		
		/// <summary> 
		/// 条纹名称
		/// </summary>
		public int Name = 0; 
		
		/// <summary> 
		/// 条纹图标
		/// </summary>
		public string Image = ""; 
		
		/// <summary> 
		/// 条纹描述
		/// </summary>
		public int Describe = 0; 
		
		/// <summary> 
		/// 条纹品质
		/// </summary>
		public int Quality = 0; 
		
		/// <summary> 
		/// 使用消耗物品
		/// </summary>
		public int costItem = 0; 
		
		/// <summary> 
		/// 使用消耗数据量
		/// </summary>
		public int costNum = 0; 
		
		/// <summary> 
		/// 缩放(X,Y)
		/// </summary>
		public List<float> scale = new List<float>(); 
		
		/// <summary> 
		/// 平移(X,Y)
		/// </summary>
		public List<float> offset = new List<float>(); 
		
		/// <summary> 
		/// 旋转(X,Y)
		/// </summary>
		public List<float> rotation = new List<float>(); 
	
	

	} 

	// Defined in table: HumanFashion
	[System.Serializable]
	public partial class HumanFashionDefine
	{
	
		
		/// <summary> 
		/// 时装ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 时限类型
		/// </summary>
		public int TimeType = 0; 
		
		/// <summary> 
		/// 时限时长
		/// </summary>
		public int Time = 0; 
		
		/// <summary> 
		/// 时装性别
		/// </summary>
		public int Sex = 0; 
		
		/// <summary> 
		/// 显示外观
		/// </summary>
		public int Show = 0; 
		
		/// <summary> 
		/// 时装名称
		/// </summary>
		public int Name = 0; 
		
		/// <summary> 
		/// 时装图标
		/// </summary>
		public string Image = ""; 
		
		/// <summary> 
		/// 时装描述
		/// </summary>
		public int Describe = 0; 
		
		/// <summary> 
		/// 贩卖货币
		/// </summary>
		public int SaleType = 0; 
		
		/// <summary> 
		/// 贩卖价格
		/// </summary>
		public int Price = 0; 
		
		/// <summary> 
		/// 时装品质
		/// </summary>
		public int Quality = 0; 
		
		/// <summary> 
		/// 时装index
		/// </summary>
		public int TextureArrayIndex = 0; 
	
	

	} 

	// Defined in table: HumanSkill
	[System.Serializable]
	public partial class HumanSkillDefine
	{
	
		
		/// <summary> 
		/// 技能ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 触发具体条件
		/// </summary>
		public SkillTriggerContent Trigger = SkillTriggerContent.SunnyDay; 
		
		/// <summary> 
		/// 属性载体（0马1装备）
		/// </summary>
		public int AttributePart = 0; 
		
		/// <summary> 
		/// 属性类型
		/// </summary>
		public AttributeType AttributeType = AttributeType.Speed; 
		
		/// <summary> 
		/// 数值类型
		/// </summary>
		public ValueType ValueType = ValueType.Integer; 
		
		/// <summary> 
		/// 基础效果值
		/// </summary>
		public float BasicNumber = 0f; 
		
		/// <summary> 
		/// 每级效果值
		/// </summary>
		public float LevelNumber = 0f; 
		
		/// <summary> 
		/// 等级上限
		/// </summary>
		public int MaxLevel = 0; 
		
		/// <summary> 
		/// 技能名称
		/// </summary>
		public int Name = 0; 
		
		/// <summary> 
		/// 技能图标
		/// </summary>
		public string Image = ""; 
		
		/// <summary> 
		/// 技能描述
		/// </summary>
		public int Describe = 0; 
		
		/// <summary> 
		/// 每级战力值
		/// </summary>
		public int LevelBattlePoint = 0; 
		
		/// <summary> 
		/// 每级所需经验值总值
		/// </summary>
		public List<int> LevelList = new List<int>(); 
	
	

	} 

	// Defined in table: Item
	[System.Serializable]
	public partial class ItemDefine
	{
	
		
		/// <summary> 
		/// 道具ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 道具类型
		/// </summary>
		public int Type = 0; 
		
		/// <summary> 
		/// 道具叠加上限
		/// </summary>
		public int MaxNumber = 0; 
		
		/// <summary> 
		/// 礼包内容
		/// </summary>
		public int PackageContent = 0; 
		
		/// <summary> 
		/// 道具名称
		/// </summary>
		public int Name = 0; 
		
		/// <summary> 
		/// 道具图标
		/// </summary>
		public string Image = ""; 
		
		/// <summary> 
		/// 道具描述
		/// </summary>
		public int Describe = 0; 
		
		/// <summary> 
		/// 道具品质
		/// </summary>
		public int Quality = 0; 
		
		/// <summary> 
		/// 出售货币
		/// </summary>
		public int SaleType = 0; 
		
		/// <summary> 
		/// 出售价格
		/// </summary>
		public int Price = 0; 
		
		/// <summary> 
		/// 商城购买
		/// </summary>
		public int AccessWay1 = 0; 
		
		/// <summary> 
		/// 挑战赛获取
		/// </summary>
		public int AccessWay2 = 0; 
		
		/// <summary> 
		/// 道具名字
		/// </summary>
		public string daojumingzi = ""; 
		
		/// <summary> 
		/// 道具解释
		/// </summary>
		public string daojujieshi = ""; 
	
	

	} 

	// Defined in table: ItemPack
	[System.Serializable]
	public partial class ItemPackDefine
	{
	
		
		/// <summary> 
		/// 奖励ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 奖励展示
		/// </summary>
		public List<DropShow> Show = new List<DropShow>(); 
	
	

	} 

	// Defined in table: Language
	[System.Serializable]
	public partial class LanguageDefine
	{
	
		
		/// <summary> 
		/// 文本id
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 中文
		/// </summary>
		public string Chinese = ""; 
		
		/// <summary> 
		/// English
		/// </summary>
		public string English = ""; 
	
	

	} 

	// Defined in table: LittleGame
	[System.Serializable]
	public partial class LittleGameDefine
	{
	
		
		/// <summary> 
		/// ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 名字
		/// </summary>
		public string Name = ""; 
		
		/// <summary> 
		/// 游戏类型
		/// </summary>
		public int type = 0; 
		
		/// <summary> 
		/// 难度等级
		/// </summary>
		public int Level = 0; 
		
		/// <summary> 
		/// 难度值
		/// </summary>
		public List<int> difficulty = new List<int>(); 
		
		/// <summary> 
		/// 操作值
		/// </summary>
		public int operation = 0; 
		
		/// <summary> 
		/// 属性1速度2耐力3爆发4平衡
		/// </summary>
		public List<GameAttributeDisplay> Displayattribute = new List<GameAttributeDisplay>(); 
		
		/// <summary> 
		/// 成功掉落物品包
		/// </summary>
		public int DropPackback = 0; 
		
		/// <summary> 
		/// 游戏描述
		/// </summary>
		public int describe = 0; 
	
	

	} 

	// Defined in table: MapSet
	[System.Serializable]
	public partial class MapSetDefine
	{
	
		
		/// <summary> 
		/// 场景ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 加载场景
		/// </summary>
		public string Scene = ""; 
		
		/// <summary> 
		/// 1200米赛道预制件
		/// </summary>
		public string Race1200 = ""; 
		
		/// <summary> 
		/// 1200米赛道配置文件
		/// </summary>
		public string Bin1200 = ""; 
		
		/// <summary> 
		/// 1600米赛道预制件
		/// </summary>
		public string Race1600 = ""; 
		
		/// <summary> 
		/// 1600米赛道配置文件
		/// </summary>
		public string Bin1600 = ""; 
		
		/// <summary> 
		/// 2200米赛道预制件
		/// </summary>
		public string Race2200 = ""; 
		
		/// <summary> 
		/// 2200米赛道配置文件
		/// </summary>
		public string Bin2200 = ""; 
		
		/// <summary> 
		/// 3000米赛道预制件
		/// </summary>
		public string Race3000 = ""; 
		
		/// <summary> 
		/// 3000米赛道配置文件
		/// </summary>
		public string Bin3000 = ""; 
	
	

	} 

	// Defined in table: MatchConfig
	[System.Serializable]
	public partial class MatchConfigDefine
	{
	
		
		/// <summary> 
		/// 字段名
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 字段描述
		/// </summary>
		public string Desc = ""; 
		
		/// <summary> 
		/// int类型
		/// </summary>
		public int param1 = 0; 
		
		/// <summary> 
		/// int数组类型
		/// </summary>
		public List<long> param2 = new List<long>(); 
		
		/// <summary> 
		/// string类型
		/// </summary>
		public string param3 = ""; 
		
		/// <summary> 
		/// int32数组类型
		/// </summary>
		public List<int> param4 = new List<int>(); 
	
	

	} 

	// Defined in table: MatchEffectType
	[System.Serializable]
	public partial class MatchEffectTypeDefine
	{
	
		
		/// <summary> 
		/// 赛事类型ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 具体类型
		/// </summary>
		public SkillTriggerContent MatchEffectType = SkillTriggerContent.SunnyDay; 
		
		/// <summary> 
		/// 速度影响
		/// </summary>
		public float Speed = 0f; 
		
		/// <summary> 
		/// 爆发影响
		/// </summary>
		public float Burst = 0f; 
		
		/// <summary> 
		/// 耐力影响
		/// </summary>
		public float Endurance = 0f; 
		
		/// <summary> 
		/// 平衡影响
		/// </summary>
		public float Balance = 0f; 
	
	

	} 

	// Defined in table: NormalShop
	[System.Serializable]
	public partial class NormalShopDefine
	{
	
		
		/// <summary> 
		/// 商品ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 物品列表格式：ID|数量|ID|数量…
		/// </summary>
		public List<long> Items = new List<long>(); 
		
		/// <summary> 
		/// 限购类型
		/// </summary>
		public CommodityLimitType LimitType = CommodityLimitType.NoneLimit; 
		
		/// <summary> 
		/// 限购次数<1表示不限
		/// </summary>
		public int LimitTime = 0; 
		
		/// <summary> 
		/// 购买所需货币ID
		/// </summary>
		public int CurrencyID = 0; 
		
		/// <summary> 
		/// 吊牌价
		/// </summary>
		public int ShowPrice = 0; 
		
		/// <summary> 
		/// 实际卖价
		/// </summary>
		public int CurrencyNumber = 0; 
		
		/// <summary> 
		/// 上架时间
		/// </summary>
		public long StartSaleTime = 0; 
		
		/// <summary> 
		/// 存续时间
		/// </summary>
		public long EndSaleTime = 0; 
		
		/// <summary> 
		/// 商品名称
		/// </summary>
		public int CommodityName = 0; 
		
		/// <summary> 
		/// 商品图片
		/// </summary>
		public string CommodityImage = ""; 
		
		/// <summary> 
		/// 商品描述
		/// </summary>
		public int CommodityText = 0; 
		
		/// <summary> 
		/// 商品品质
		/// </summary>
		public int quality = 0; 
		
		/// <summary> 
		/// 商品说明
		/// </summary>
		public string Explain = ""; 
		
		/// <summary> 
		/// 商品类型（1兑换2道具）
		/// </summary>
		public int Commoditytype = 0; 
	
	

	} 

	// Defined in table: Noviceguide
	[System.Serializable]
	public partial class NoviceguideDefine
	{
	
		
		/// <summary> 
		/// ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 小步ID
		/// </summary>
		public List<int> SmallSteps = new List<int>(); 
	
	

	} 

	// Defined in table: OfficialMatch
	[System.Serializable]
	public partial class OfficialMatchDefine
	{
	
		
		/// <summary> 
		/// 唯一ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 第几赛季
		/// </summary>
		public string Competitionseason = ""; 
		
		/// <summary> 
		/// 开始时间（年-月-日）
		/// </summary>
		public string StartTime = ""; 
		
		/// <summary> 
		/// 日赛单场次奖励
		/// </summary>
		public List<RankingAward> DayRaceNormalReward = new List<RankingAward>(); 
		
		/// <summary> 
		/// 日赛最终奖励
		/// </summary>
		public List<RankingAward> DayRaceFinalReward = new List<RankingAward>(); 
		
		/// <summary> 
		/// 周赛单场次奖励
		/// </summary>
		public List<RankingAward> WeekRaceNormalReward = new List<RankingAward>(); 
		
		/// <summary> 
		/// 周赛最终奖励
		/// </summary>
		public List<RankingAward> WeekRaceFinalReward = new List<RankingAward>(); 
		
		/// <summary> 
		/// 选拔赛单场次奖励
		/// </summary>
		public List<RankingAward> TryoutNormalReward = new List<RankingAward>(); 
		
		/// <summary> 
		/// 选拔赛最终奖励
		/// </summary>
		public List<RankingAward> TryoutFinalReward = new List<RankingAward>(); 
		
		/// <summary> 
		/// 月赛单场次奖励
		/// </summary>
		public List<RankingAward> MonthRaceNormalReward = new List<RankingAward>(); 
		
		/// <summary> 
		/// 月赛最终奖励
		/// </summary>
		public List<RankingAward> MonthRaceFinalReward = new List<RankingAward>(); 
	
	

	} 

	// Defined in table: RandomName
	[System.Serializable]
	public partial class RandomNameDefine
	{
	
		
		/// <summary> 
		/// 随机ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 人物名称前缀
		/// </summary>
		public int HumanNamePre = 0; 
		
		/// <summary> 
		/// 男性名称
		/// </summary>
		public int MaleName = 0; 
		
		/// <summary> 
		/// 女性名称
		/// </summary>
		public int FemaleName = 0; 
		
		/// <summary> 
		/// 马匹名称前缀
		/// </summary>
		public int HorseNamePre = 0; 
		
		/// <summary> 
		/// 马匹名称
		/// </summary>
		public int HorseName = 0; 
	
	

	} 

	// Defined in table: RandomName1
	[System.Serializable]
	public partial class RandomName1Define
	{
	
		
		/// <summary> 
		/// 人物名称前缀
		/// </summary>
		public string HumanNamePre = ""; 
		
		/// <summary> 
		/// 男性名称
		/// </summary>
		public string MaleName = ""; 
		
		/// <summary> 
		/// 女性名称
		/// </summary>
		public string FemaleName = ""; 
	
	

	} 

	// Defined in table: Recharge
	[System.Serializable]
	public partial class RechargeDefine
	{
	
		
		/// <summary> 
		/// 充值ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 充值金额（单位：元）
		/// </summary>
		public int Money = 0; 
		
		/// <summary> 
		/// 获得货币ID
		/// </summary>
		public int CurrencyID = 0; 
		
		/// <summary> 
		/// 获得货币数目
		/// </summary>
		public int CurrencyNumber = 0; 
		
		/// <summary> 
		/// 第一次充值获得数目
		/// </summary>
		public int FirstTimeGet = 0; 
	
	

	} 

	// Defined in table: Robot
	[System.Serializable]
	public partial class RobotDefine
	{
	
		
		/// <summary> 
		/// 机器人ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 唯一ID
		/// </summary>
		public long Uid = 0; 
		
		/// <summary> 
		/// 名称
		/// </summary>
		public int Name = 0; 
		
		/// <summary> 
		/// 性别0男1女
		/// </summary>
		public int Sex = 0; 
		
		/// <summary> 
		/// 模型
		/// </summary>
		public int Model = 0; 
		
		/// <summary> 
		/// 时装
		/// </summary>
		public int Latestfashion = 0; 
		
		/// <summary> 
		/// 头像
		/// </summary>
		public string Image = ""; 
	
	

	} 

	// Defined in table: RobotHorse
	[System.Serializable]
	public partial class RobotHorseDefine
	{
	
		
		/// <summary> 
		/// ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 马匹ID
		/// </summary>
		public int HorseID = 0; 
		
		/// <summary> 
		/// 所属Uid
		/// </summary>
		public long Uid = 0; 
		
		/// <summary> 
		/// 速度
		/// </summary>
		public int Speed = 0; 
		
		/// <summary> 
		/// 耐力
		/// </summary>
		public int Endurance = 0; 
		
		/// <summary> 
		/// 平衡
		/// </summary>
		public int Burst = 0; 
		
		/// <summary> 
		/// 爆发
		/// </summary>
		public int Balance = 0; 
		
		/// <summary> 
		/// 血统id
		/// </summary>
		public int Ancestry = 0; 
		
		/// <summary> 
		/// 基因1id
		/// </summary>
		public int Gene1 = 0; 
		
		/// <summary> 
		/// 基因2id
		/// </summary>
		public int Gene2 = 0; 
		
		/// <summary> 
		/// 基因3id
		/// </summary>
		public int Gene3 = 0; 
		
		/// <summary> 
		/// 基因4id
		/// </summary>
		public int Gene4 = 0; 
		
		/// <summary> 
		/// 技能1id
		/// </summary>
		public int Skill1 = 0; 
		
		/// <summary> 
		/// 技能2id
		/// </summary>
		public int Skill2 = 0; 
		
		/// <summary> 
		/// 技能3id
		/// </summary>
		public int Skill3 = 0; 
		
		/// <summary> 
		/// 技能4id
		/// </summary>
		public int Skill4 = 0; 
		
		/// <summary> 
		/// 马匹名称
		/// </summary>
		public int Name = 0; 
		
		/// <summary> 
		/// 马匹皮肤
		/// </summary>
		public int Skin = 0; 
		
		/// <summary> 
		/// 马匹头像
		/// </summary>
		public string Image = ""; 
	
	

	} 

	// Defined in table: SecondaryAttribute
	[System.Serializable]
	public partial class SecondaryAttributeDefine
	{
	
		
		/// <summary> 
		/// 二级属性ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 初始值
		/// </summary>
		public float BasicValue = 0f; 
		
		/// <summary> 
		/// 初始成长值
		/// </summary>
		public float BasicGrow = 0f; 
		
		/// <summary> 
		/// 成长值边际递减
		/// </summary>
		public float MarginalDiminishing = 0f; 
		
		/// <summary> 
		/// 成长值最低值系数
		/// </summary>
		public float MinValue = 0f; 
		
		/// <summary> 
		/// 备注
		/// </summary>
		public string Remark = ""; 
	
	

	} 

	// Defined in table: SellHorse
	[System.Serializable]
	public partial class SellHorseDefine
	{
	
		
		/// <summary> 
		/// 头像ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 血统
		/// </summary>
		public int Ancestry = 0; 
		
		/// <summary> 
		/// 默认4条基因
		/// </summary>
		public List<int> DefaultDnas = new List<int>(); 
	
	

	} 

	// Defined in table: Sign
	[System.Serializable]
	public partial class SignDefine
	{
	
		
		/// <summary> 
		/// 签到ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 开始时间
		/// </summary>
		public string starttime = ""; 
		
		/// <summary> 
		/// 截止时间
		/// </summary>
		public string Endtime = ""; 
		
		/// <summary> 
		/// 星期一
		/// </summary>
		public List<long> Monday = new List<long>(); 
		
		/// <summary> 
		/// 星期二
		/// </summary>
		public List<long> Tuesday = new List<long>(); 
		
		/// <summary> 
		/// 星期三
		/// </summary>
		public List<long> Wednesday = new List<long>(); 
		
		/// <summary> 
		/// 星期四
		/// </summary>
		public List<long> Thursday = new List<long>(); 
		
		/// <summary> 
		/// 星期五
		/// </summary>
		public List<long> Friday = new List<long>(); 
		
		/// <summary> 
		/// 星期六
		/// </summary>
		public List<long> Saturday = new List<long>(); 
		
		/// <summary> 
		/// 星期日
		/// </summary>
		public List<long> Sunday = new List<long>(); 
	
	

	} 

	// Defined in table: Steptable
	[System.Serializable]
	public partial class SteptableDefine
	{
	
		
		/// <summary> 
		/// ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 是否有副作用,如果有副作用,被中断重启的时候当前大步算跳过(完成)
		/// </summary>
		public bool Bad = false; 
		
		/// <summary> 
		/// 等待帧数
		/// </summary>
		public int DelayFrame = 0; 
		
		/// <summary> 
		/// 跳过条件类型
		///1 ui如果有就跳过(预制件名字)
		/// </summary>
		public int SkipType = 0; 
		
		/// <summary> 
		/// 跳过参数
		/// </summary>
		public string SkipInfo = ""; 
		
		/// <summary> 
		/// 开始触发条件
		/// </summary>
		public GuideHandle StartHandle = new GuideHandle(); 
		
		/// <summary> 
		/// 初始化
		/// </summary>
		public List<GuideHandle> InitHandles = new List<GuideHandle>(); 
		
		/// <summary> 
		/// 完成(点击)事件
		/// </summary>
		public GuideHandle CompleteHandle = new GuideHandle(); 
	
	

	} 

	// Defined in table: Stud
	[System.Serializable]
	public partial class StudDefine
	{
	
		
		/// <summary> 
		/// 种马ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 马匹ID
		/// </summary>
		public int HorseID = 0; 
		
		/// <summary> 
		/// 消耗道具
		/// </summary>
		public int CostID = 0; 
		
		/// <summary> 
		/// 消耗数量
		/// </summary>
		public int CostNumber = 0; 
	
	

	} 

}
